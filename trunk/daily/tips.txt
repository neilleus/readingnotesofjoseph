### 通过ucboot烧写jffs2.img到闪存
1. 擦除
#erase [addr] +[size]
2. 下载到DRAM
#tftp [addr_in_dram] [filename]
3. 烧写NOR闪存
#cp.b [dst_addr_in_flash] [src_addr_in_dram] [size]
#cp需要指定是按byte还是word还是dword来擦写，方法是cp.b, cp.w, cp.l
4. 显示内存或者闪存中的内容
#md.b [addr] [size]

### 通过mtd-utils烧写jffs2.img到闪存
1. 擦除
#flash_eraseall -j /dev/mtd[n]
2. 烧写NOR闪存
#flashcp filename.jffs2 /dev/mtd[n]
2. 烧写NAND闪存
#nandwrite -p /dev/mtd[n] filename.jffs2
#
### 制作jffs2镜像
#mkfs.jffs2 -r dir -o file.jffs2
### 划分mtd分区
struct mtd_partition {};

### malloc, calloc, realloc的区别
void *calloc(size_t nmemb, size_t size);
void *malloc(size_t size);
void *realloc(void *ptr, size_t size);
void *valloc(size_t size);
void *memalign(size_t boundary, size_t size);
int posix_memalign(void **memptr, size_t alignment, size_t size);
calloc分配一个nmemb数组，每个数组元素大小为size，并将分配的内存初始化为全0。
malloc分配给定字节数量的内存，但不初始化内存。
realloc改变ptr指向的已分配内存的大小到size字节，已分配的内容不会被更改，新分配
的区域不会被初始化。如果ptr为NULL，则它就等同于malloc。如果ptr不为NULL，而size
为0，则等同于free。
posix_memalign分配size字节的内存，并且将分配的内存的地址赋值给*memptr。所分配
内存的地址是alignment的整数倍，alignment必须是2的幂次方，并且是sizeof(void *)的
整数倍。所分配的内存不会被初始化。
memalign和valloc都已经被废弃，它们都不初始化。

