Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

编程中常用的位操作总结

*** 计算海明重量的方法
方法一：分别判断每一位
	int bit_count(int n)
	{
		int count;
		for (count = 0; n ;n >>= 1)
			count += n & 1;
		return count;
	}
方法二：只判断为一的位，利用二进制减法借位变一的特点，跳过为0的位。
        n & n-1的结果中最低位永远为零，这适用于0和1的比例很大或极小的时候计算
	很快。
	int bit_count(int n)
	{
		int count;
		for (count = 0; n; n &= n-1)
			count++;
		return count;
	}
方法三：并行方法进行向量运算计算，这是最坏情况下的最好办法。另外由于不需要循
	环，所以可以高效利用处理器的流水线技术。

*** 将一个无符号整数按位反序

*** 判断奇偶性

*** 交换半字节，交换字节，交换字

*** 不利用中间变量交换两个数的值
    方法一：利用异或运算（x = (x ^ y) ^ y）
            #define swap(a ,b)	(((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b)))
    方法二：

*** 查找第一个被设置位(ffs)，查找第一个被清零位(ffz)

*** 查找下一个被设置位(find_next_bit)，查找下一个被清零位(find_next_zero_bit)

*** 判断一个数是否是2的幂次
    bool ispower2(int n)
    {
	    /* 零是特殊情况，要做出判断 */
	    if (!n)
		    return false;
	    return (!(n & (n-1)))
    }

--------------------------------------
References:
http://graphics.stanford.edu/~seander/bithacks.html
http://aggregate.ee.engr.uky.edu/MAGIC/

