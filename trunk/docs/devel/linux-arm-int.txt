linux-2.6.26内核中ARM中断实现详解
作者：刘洪涛，华清远见嵌入式学院金牌讲师，ARM ATC授权培训讲师。

*******************************************************************************
一、中断注册方法
*******************************************************************************
　　在linux内核中用于申请中断的函数是request_irq（），函数原型在
	Kernel/irq/manage.c中定义：
　　int request_irq(unsigned int irq, irq_handler_t handler,
　　unsigned long irqflags, const char *devname, void *dev_id)
　　irq是要申请的硬件中断号。
　　handler是向系统注册的中断处理函数，是一个回调函数，中断发生时，系统调用这
个函数，dev_id参数将被传递给它。
　　irqflags是中断处理的属性，若设置了IRQF_DISABLED （老版本中的SA_INTERRUPT，
本版中已经不支持了），则表示中断处理程序是快速处理程序，快速处理程序被调用时屏
蔽所有中断，慢速处理程序不屏蔽；若设置了IRQF_SHARED （老版本中的SA_SHIRQ），则
表示多个设备共享中断，若设置了IRQF_SAMPLE_RANDOM（老版本中的
SA_SAMPLE_RANDOM），表示对系统熵有贡献，对系统获取随机数有好处。（这几个flag是
可以通过或的方式同时使用的）
　　dev_id在中断共享时会用到，一般设置为这个设备的设备结构体或者NULL。
　　devname设置中断名称，在cat /proc/interrupts中可以看到此名称。
　　request_irq()返回0表示成功，返回-INVAL表示中断号无效或处理函数指针为NULL，
返回-EBUSY表示中断已经被占用且不能共享。
　　关于中断注册的例子，大家可在内核中搜索下request_irq。
　　在编写驱动的过程中，比较容易产生疑惑的地方是：

  ****************************************************************
　* 1、中断向量表在什么位置？是如何建立的？                      *
　* 2、从中断开始，系统是怎样执行到我自己注册的函数的？          *
　* 3、中断号是如何确定的？对于硬件上有子中断的中断号如何确定？  *
　* 4、中断共享是怎么回事，dev_id的作用是？                      *
  ****************************************************************

　　本文以2.6.26内核和S3C2410处理器为例，为大家讲解这几个问题。

*******************************************************************************
二、异常向量表的建立
*******************************************************************************
　　在ARM V4及V4T以后的大部分处理器中，中断向量表的位置可以有两个位置：一个
是0，另一个是0xffff0000。可以通过CP15协处理器c1寄存器中V位(bit[13])控制。V和
中断向量表的对应关系如下：
　　V=0  ～  0x00000000~0x0000001C
　　V=1  ～  0xffff0000~0xffff001C

  +------------------------------------------------------------------+
  | Exception Type |   Mode   | Normal Address | High Vector Address |
  +----------------+----------+----------------+---------------------+
  |     Reset      |supervisor|   0x00000000   |     0xFFFF0000      |
  +----------------+----------+----------------+---------------------+
  | Undefined Ins  |undefiend |   0x00000004   |     0xFFFF0004      |
  +----------------+----------+----------------+---------------------+
  | Software Intr  |supervisor|   0x00000008   |     0xFFFF0008      |
  +----------------+----------+----------------+---------------------+
  | Prefetch Abort |  abort   |   0x0000000C   |     0xFFFF000C      |
  +----------------+----------+----------------+---------------------+
  |   Data Abrot   |  abort   |   0x00000010   |     0xFFFF0010      |
  +----------------+----------+----------------+---------------------+
  |      IRQ       |   IRQ    |   0x00000018   |     0xFFFF0018      |
  +----------------+----------+----------------+---------------------+
  |      FIQ       |   FIQ    |   0x0000001C   |     0xFFFF001C      |
  +----------------+----------+----------------+---------------------+

　　arch/arm/mm/proc-arm920.S中
　　.section ".text.init", #alloc, #execinstr
　　__arm920_setup:
　　…… orr       r0, r0, #0x2100              @ ..1. ...1 ..11 ...1
　　//bit13=1 中断向量表基址为0xFFFF0000。R0的值将被付给CP15的C1.
　　在linux中，向量表建立的函数为：

　　init/main.c->start_kernel()->trap_init()
　　void __init trap_init(void)
　　{
　　unsigned long vectors = CONFIG_VECTORS_BASE;
　　……
　　memcpy((void *)vectors, __vectors_start, __vectors_end - __vectors_start);
　　memcpy((void *)vectors + 0x200, __stubs_start, __stubs_end - __stubs_start);
　　....
　　}

　　在2.6.26内核中CONFIG_VECTORS_BASE最初是在各个平台的配置文件中设定的，如：
　　arch/arm/configs/s3c2410_defconfig中

　　CONFIG_VECTORS_BASE=0xffff0000

　　__vectors_end 至 __vectors_start之间为异常向量表。
　　位于arch/arm/kernel/entry-armv.S

　　.globl __vectors_start
　　__vectors_start:
　　swi SYS_ERROR0:		       //软件中断?????
　　b vector_und + stubs_offset        //未定义指令异常
　　ldr pc, .LCvswi + stubs_offset     //软件中断异常
　　b vector_pa + stubs_offset         //预取指中止异常
　　b vector_da + stubs_offset         //数据中止异常
　　b vector_addrexcptn + stubs_offset //地址异常（遗留产物）
　　b vector_irq + stubs_offset        //普通中断异常:
　　b vector_fiq + stubs_offset        //快速中断异常:
　　.globl __vectors_end:
　　__vectors_end:

　　__stubs_end 至 __stubs_start之间是异常处理的位置。也位于文件
	arch/arm/kernel/entry-armv.S中。
	vector_und, vector_pa, vector_irq, vector_fiq
    都在它们中间。

　　stubs_offset值如下：
　　.equ stubs_offset, __vectors_start + 0x200 - __stubs_start

　　stubs_offset是如何确定的呢？
　　当汇编器看到B指令后会把要跳转的标签转化为相对于当前PC的偏移量（±32M）写入
指令码。从上面的代码可以看到中断向量表和stubs都发生了代码搬移，所以如果中断向
量表中仍然写成b vector_irq，那么实际执行的时候就无法跳转到搬移后的vector_irq
处，因为指令码里写的是原来的偏移量，所以需要把指令码中的偏移量写成搬移后的。我
们把搬移前的中断向量表中的irq入口地址记irq_PC,它在中断向量表的偏移量就是
irq_PC-vectors_start, vector_irq在stubs中的偏移量是vector_irq-stubs_start，这
两个偏移量在搬移前后是不变的。搬移后 vectors_start在0xffff0000处，而
stubs_start在0xffff0200处，所以搬移后的vector_irq相对于中断向量中的中断入口地
址的偏移量就是，200+vector_irq在stubs中的偏移量再减去中断入口在向量表中的偏移
量，即
	200 + vector_irq - stubs_start - irq_PC + vectors_start =
		(vector_irq - irq_PC) + vectors_start + 200 - stubs_start
对于括号内的值实际上就是中断向量表中写的vector_irq，减去irq_PC是由汇编器完成
的，而后面的 vectors_start+200-stubs_start就应该是stubs_offset，实际上在
entry-armv.S中也是这样定义的。

*******************************************************************************
三、中断处理过程
*******************************************************************************

　　这一节将以S3C2410为例，描述linux-2.6.26内核中，从中断开始，中断是如何一步
一步执行到我们注册函数的。

3.1 中断向量表 arch\arm\kernel\entry-armv.S

　　__vectors_start:
　　swi SYS_ERROR0
　　b    vector_und + stubs_offset
　　ldr pc, .LCvswi + stubs_offset
　　b    vector_pa + stubs_offset
　　b    vector_da + stubs_offset
　　b    vector_addrexcptn + stubs_offset
　　b    vector_irq + stubs_offset
　　b    vector_fiq + stubs_offset
　　.globl   __vectors_end
　　__vectors_end:

　　中断发生后，跳转到b vector_irq + stubs_offset的位置执行。注意现在的向量表
的初始位置是0xffff0000。

3.2 中断跳转的入口位置

    arch\arm\kernel\entry-armv.S
　　.globl   __stubs_start
　　__stubs_start:
　　/*
　 　* Interrupt dispatcher
     * IRQ_MODE在include\asm\ptrace.h中定义：0x12
　 　*/
　　vector_stub    irq, IRQ_MODE, 4
　　.long    __irq_usr 	   @ 0 (USR_26 / USR_32)
　　.long    __irq_invalid @ 1 (FIQ_26 / FIQ_32)
　　.long    __irq_invalid @ 2 (IRQ_26 / IRQ_32)
　　.long    __irq_svc     @ 3 (SVC_26 / SVC_32)
　　.long    __irq_invalid @ 4
　　.long    __irq_invalid @ 5
　　.long    __irq_invalid @ 6
　　.long    __irq_invalid @ 7
　　.long    __irq_invalid @ 8
　　.long    __irq_invalid @ 9
　　.long    __irq_invalid @ a
　　.long    __irq_invalid @ b
　　.long    __irq_invalid @ c
　　.long    __irq_invalid @ d
　　.long    __irq_invalid @ e
　　.long    __irq_invalid @ f

　　上面代码中vector_stub宏的定义为：
　　.macro vector_stub, name, mode, correction=0
　　.align 5
　　vector_\name:
　　.if \correction
　　sub lr, lr, #\correction
　　.endif

　　@
　　@ Save r0, lr_<exception> (parent PC) and spsr_<exception>
　　@ (parent CPSR)
　　@

　　stmia sp, {r0, lr} @ save r0, lr
　　mrs lr, spsr
　　str lr, [sp, #8] @ save spsr

　　@
　　@ Prepare for SVC32 mode. IRQs remain disabled.
　　@

　　mrs r0, cpsr
　　eor r0, r0, #(\mode ^ SVC_MODE)
　　msr spsr_cxsf, r0 @为后面进入svc模式做准备

　　@
　　@ the branch table must immediately follow this code
　　@
　　and lr, lr, #0x0f		@进入中断前的mode的后4位
				@#define USR_MODE 0x00000010
				@#define FIQ_MODE 0x00000011
				@#define IRQ_MODE 0x00000012
				@#define SVC_MODE 0x00000013
				@#define ABT_MODE 0x00000017
				@#define UND_MODE 0x0000001b
				@#define SYSTEM_MODE 0x0000001f
　　mov r0, sp
　　ldr lr, [pc, lr, lsl #2]	@如果进入中断前是usr，则取出PC+4*0的内容
				@即__irq_usr 如果进入中断前是svc，则取出
				@PC+4*3的内容，即__irq_svc
    movs pc, lr			@branch to handler in SVC mode
    				@当指令的目标寄存器是PC，且指令以S结束，
    				@则它会把@ spsr的值恢复给 cpsr.
ENDPORC(vector\_name)
　　.endm

　　.globl __stubs_start
__stubs_start:
　　/*
　　* Interrupt dispatcher
　　*/
　　vector_stub irq, IRQ_MODE, 4

　　.long __irq_usr 		@ 0 (USR_26 / USR_32)
　　.long __irq_invalid 	@ 1 (FIQ_26 / FIQ_32)
　　.long __irq_invalid 	@ 2 (IRQ_26 / IRQ_32)
　　.long __irq_svc 		@ 3 (SVC_26 / SVC_32)
　　.long __irq_invalid 	@ 4
	......
　　.long __irq_invalid 	@ f

　　用“irq, IRQ_MODE, 4”代替宏vector_stub中的“name, mode, correction”，找到了
我们中断处理的入口位置为vector_irq（宏里面的vector_\name）。

　　从上面代码中的注释可以看出，根据进入中断前的工作模式不同，程序下一步将跳转
到__irq_usr或__irq_svc等位置。我们先选择__irq_usr作为下一步跟踪的目标。

3.3 __irq_usr的实现

    arch\arm\kernel\entry-armv.S
　　__irq_usr:
　　usr_entry
　　kuser_cmpxchg_check
#ifdef CONFIG_TRACE_IRQFLAGS
　　bl trace_hardirqs_off
#endif

　　get_thread_info tsk 	@获取当前进程的进程描述符中的成员变量
				@thread_info的地址，并将该地址保存到寄
				@存器tsk等于r9（在entry-header.S中定义）

#ifdef CONFIG_PREEMPT		//如果定义了抢占，增加抢占数值
　　ldr r8, [tsk, #TI_PREEMPT]	@ get preempt count
　　add r7, r8, #1 		@ increment it
　　str r7, [tsk, #TI_PREEMPT]
#endif

　　irq_handler			@中断处理，我们最关心的地方，3.4节有实现过程。
#ifdef CONFIG_PREEMPT
　　ldr r0, [tsk, #TI_PREEMPT]
　　str r8, [tsk, #TI_PREEMPT]
　　teq r0, r7
　　strne r0, [r0, -r0]
#endif
#ifdef CONFIG_TRACE_IRQFLAGS
　　bl trace_hardirqs_on
#endif

　　mov why, #0
　　b ret_to_user		@中断处理完成，返回中断产生的位置，
				@3.7节有实现过程

　　上面代码中的usr_entry是一个宏，主要实现了将usr模式下的寄存器、中断返回地
址保存到堆栈中。

　　.macro usr_entry
　　sub sp, sp, #S_FRAME_SIZE	@S_FRAME_SIZE的值在
				@arch\arm\kernel\asm-offsets.c
				@中定义
				@DEFINE(S_FRAME_SIZE, sizeof(struct pt_regs));
				@实际上等于72
　　stmib sp, {r1 - r12}

　　ldmia r0, {r1 - r3}
　　add r0, sp, #S_PC		@ here for interlock avoidance
　　mov r4, #-1			@ "" "" "" ""

　　str r1, [sp]		@ save the "real" r0 copied
				@ from the exception stack

　　@
　　@ We are now ready to fill in the remaining blanks on the stack:
　　@
　　@ r2 - lr_<exception>, already fixed up for correct return/restart
　　@ r3 - spsr_<exception>
　　@ r4 - orig_r0 (see pt_regs definition in ptrace.h)
　　@
　　@ Also, separately save sp_usr and lr_usr
　　@
　　stmia r0, {r2 - r4}
　　stmdb r0, {sp, lr}^

　　@
　　@ Enable the alignment trap while in kernel mode
　　@
　　alignment_trap r0

　　@
　　@ Clear FP to mark the first stack frame
　　@
　　zero_fp
　　.endm

　　上面的这段代码主要在填充结构体pt_regs ，这里提到的struct pt_regs，在
include/asm/ptrace.h中定义。此时sp指向struct pt_regs。

　　struct pt_regs {
	long uregs[18];
　　};

　　#define ARM_cpsr uregs[16]
　　#define ARM_pc uregs[15]
　　#define ARM_lr uregs[14]
　　#define ARM_sp uregs[13]
　　#define ARM_ip uregs[12]
　　#define ARM_fp uregs[11]
　　#define ARM_r10 uregs[10]
　　#define ARM_r9 uregs[9]
　　#define ARM_r8 uregs[8]
　　#define ARM_r7 uregs[7]
　　#define ARM_r6 uregs[6]
　　#define ARM_r5 uregs[5]
　　#define ARM_r4 uregs[4]
　　#define ARM_r3 uregs[3]
　　#define ARM_r2 uregs[2]
　　#define ARM_r1 uregs[1]
　　#define ARM_r0 uregs[0]
　　#define ARM_ORIG_r0 uregs[17]

3.4 irq_handler的实现过程

    arch\arm\kernel\entry-armv.S
　　.macro irq_handler
　　get_irqnr_preamble r5, lr	@在include/asm/arch-s3c2410/entry-macro.s
				@中定义了宏get_irqnr_preamble为空操作，什
				@么都不做
1:  get_irqnr_and_base r0, r6, r5, lr @判断中断号，通过R0返回，3.5节有实现过程
　　movne r1, sp
　　@
　　@ routine called with r0 = irq number, r1 = struct pt_regs *
　　@
　　adrne lr, 1b
　　bne asm_do_IRQ @进入中断处理。
#ifdef CONFIG_SMP
　　...
#endif
#ifdef CONFIG_LOCAL_TIMERS
　　...
#endif
　　.endm

3.5 get_irqnr_and_base中断号判断过程

    include/asm/arch-s3c2410/entry-macro.s
　　.macro get_irqnr_and_base, irqnr, irqstat, base, tmp
　　mov \base, #S3C24XX_VA_IRQ
　　@@ try the interrupt offset register, since it is there
　　ldr \irqstat, [ \base, #INTPND ]
　　teq \irqstat, #0
　　beq 1002f
　　ldr \irqnr, [ \base, #INTOFFSET ] @通过判断INTOFFSET寄存器得到中断位置
　　mov \tmp, #1
　　tst \irqstat, \tmp, lsl \irqnr
　　bne 1001f

　　@@ the number specified is not a valid irq, so try
　　@@ and work it out for ourselves
　　mov \irqnr, #0 @@ start here
　　@@ work out which irq (if any) we got
　　movs \tmp, \irqstat, lsl#16
　　addeq \irqnr, \irqnr, #16
　　moveq \irqstat, \irqstat, lsr#16
　　tst \irqstat, #0xff
　　addeq \irqnr, \irqnr, #8
　　moveq \irqstat, \irqstat, lsr#8
　　tst \irqstat, #0xf
　　addeq \irqnr, \irqnr, #4
　　moveq \irqstat, \irqstat, lsr#4
　　tst \irqstat, #0x3
　　addeq \irqnr, \irqnr, #2
　　moveq \irqstat, \irqstat, lsr#2
　　tst \irqstat, #0x1
　　addeq \irqnr, \irqnr, #1
　　@@ we have the value
　　1001:
　　adds \irqnr, \irqnr, #IRQ_EINT0
				@加上中断号的基准数值，得到最终的中断号
				@注意：此时没有考虑子中断的具体情况，（子中断
				@的问题后面会有讲解）。IRQ_EINT0在
				@include/asm/arch-s3c2410/irqs.h中定义.从这里
				@可以看出，中断号的具体值是有平台相关的代码决
				@定的，和硬件中断挂起寄存器中的中断号是不等的。
　　1002:
　　@@ exit here, Z flag unset if IRQ
　　.endm

3.6 asm_do_IRQ实现过程

    arch/arm/kernel/irq.c
asmlinkage void __exception asm_do_IRQ(unsigned int irq, struct pt_regs *regs)
{
　　struct pt_regs *old_regs = set_irq_regs(regs);
　　struct irq_desc *desc = irq_desc + irq;	//根据中断号找到对应的irq_desc
　　/*
　　* Some hardware gives randomly wrong interrupts. Rather
　　* than crashing, do something sensible.
　　*/
　　if (irq >= NR_IRQS)
　　desc = &bad_irq_desc;
　　irq_enter();		//没做什么特别的工作，可以跳过不看
　　desc_handle_irq(irq, desc);	// 根据中断号和desc进入中断处理
　　/* AT91 specific workaround */
　　irq_finish(irq);
　　irq_exit();
　　set_irq_regs(old_regs);
}

static inline void desc_handle_irq(unsigned int irq, struct irq_desc *desc)
{
　　desc->handle_irq(irq, desc);//中断处理
}

上述
asmlinkage void __exception asm_do_IRQ(unsigned int irq, struct pt_regs *regs)
使用了asmlinkage标识。那么这个标识的含义如何理解呢？
该符号定义在kernel/include/linux/linkage.h中，如下所示：
#include <asm/linkage.h>	//各个具体处理器在此文件中定义asmlinkage
#ifdef __cplusplus
#define CPP_ASMLINKAGE extern "C"
#else
#define CPP_ASMLINKAGE
#endif
#ifndef asmlinkage//如果以前没有定义asmlinkage
#define asmlinkage CPP_ASMLINKAGE
#endif

　　对于ARM处理器的<asm/linkage.h>，没有定义asmlinkage，所以没有意义（不要以为
参数是从堆栈传递的，对于ARM平台来说还是符合ATPCS过程调用标准，通过寄存器传递
的）。

但对于X86处理器的<asm/linkage.h>中是这样定义的：
　　#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))
表示函数的参数传递是通过堆栈完成的。

3.7 中断返回过程

    /arch/arm/kernel/entry-common.S
　　ENTRY(ret_to_user)
　　ret_slow_syscall:
　　disable_irq @ disable interrupts
　　ldr r1, [tsk, #TI_FLAGS]
　　tst r1, #_TIF_WORK_MASK
　　bne work_pending
　　no_work_pending:
　　/* perform. architecture specific actions before user return */
　　arch_ret_to_user r1, lr
　　@ slow_restore_user_regs
　　ldr r1, [sp, #S_PSR] @ get calling cpsr
　　ldr lr, [sp, #S_PC]! @ get pc
　　msr spsr_cxsf, r1 @ save in spsr_svc
　　ldmdb sp, {r0 - lr}^ @ get calling r0 - lr
　　mov r0, r0
　　add sp, sp, #S_FRAME_SIZE - S_PC
　　movs pc, lr @ return & move spsr_svc into cpsr

第三章主要跟踪了从中断发生到调用到对应中断号的desc->handle_irq(irq, desc)中断
函数的过程。后面的章节还会继续讲解后面的内容。

*******************************************************************************
四、中断处理模型
*******************************************************************************
　　要想弄清楚desc->handle_irq(irq, desc)和我们注册的中断有什么关联，就要了解
中断处理模型了。

4.1 中断处理模型结构

　　中断处理模型如下图所示，
+-----------------------------------------------------------------------------+
             0         i     NR_IRQS-1
           +---+-----+---+-----+---+
  irq_desc |   |     |   |     |   |
           +---+-----+---+-----+---+
                       |                hw_irq_controller
                      \|/                 \+--------+
		  +---------+   +----------|        |
		  |         |   |         /+--------+
		  +---------+   |
		  | handler |---+
		  +---------+
		  |         |
		  +---------+
		  | action  |---+
		  +---------+   |          irqaction        irqaction
		  |         |   |         \+--------+      \+--------+
		  +---------+   +----------|        |   +---|        |
                                          /+--------+   |  /+--------+   |
					   |  next  |---+   |  next  |---|
					   +--------+       +--------+   |

			Linux 中断处理层次模型
+-----------------------------------------------------------------------------+

　　其中NR_IRQS表示最大的中断号，在include/asm/arch/irq.h中定义。
　　irq_desc[]是一个指向irq_desc_t结构的数组， irq_desc_t结构是各个设备中断
服务例程的描述符。Irq_desc_t结构体中的成员action指向该中断号对应的irqaction结
构体链表。irqaction结构体定义在include/linux/interrupt.h中，如下：
truct irqaction {
　　irq_handler_t handler;	//中断处理函数，注册时提供
　　unsigned long flags;	//中断标志，注册时提供
　　cpumask_t mask;		//中断掩码
　　const char *name;		//中断名称
　　void *dev_id;		//设备id，本文后面部分介绍中断共享时会详细说
				//明这个参数的作用
　　struct irqaction *next;	//如果有中断共享，则继续执行，
　　int irq;			//中断号，注册时提供
　　struct proc_dir_entry *dir; //指向IRQn相关的/proc/irq/n目录的描述符
};

　　在注册中断号为irq的中断服务程序时，系统会根据注册参数封装相应的irqaction结
构体。并把中断号为irq的irqaction结构体写入irq_desc[irq]->action。这样就把设备
的中断请求号与该设备的中断服务例程irqaction联系在一起了。样当CPU接收到中断请求
后，就可以根据中断号通过irq_desc[]找到该设备的中断服务程序。

4.2 中断共享的处理模型

　　共享中断的不同设备的iqraction结构体都会添加进该中断号对应的irq_desc结构体的
action成员所指向的irqaction链表内。当内核发生中断时，它会依次调用该链表内所有的
handler函数。因此，若驱动程序需要使用共享中断机制，其中断处理函数必须有能力识
别是否是自己的硬件产生了中断。通常是通过读取该硬件设备提供的中断flag标志位进行
判断。也就是说不是任何设备都可以做为中断共享源的，它必须能够通过的它的中断flag
判断出是否发生了中断。
　　中断共享的注册方法是：
　　int request_irq(unsigned int irq, irq_handler_t handler,
		    IRQF_SHARED, const char *devname, void *dev_id)
　　很多权威资料中都提到，中断共享注册时的注册函数中的dev_id参数是必不可少的，
并且dev_id的值必须唯一。那么这里提供唯一的dev_id值的究竟是做什么用的？
　　根据我们前面中断模型的知识，可以看出发生中断时，内核并不判断究竟是共享中断
线上的哪个设备产生了中断，它会循环执行所有该中断线上注册的中断处理函数（即
irqaction->handler函数）。因此irqaction->handler函数有责任识别出是否是自己的硬
件设备产生了中断，然后再执行该中断处理函数。通常是通过读取该硬件设备提供的中断
flag标志位进行判断。那既然kernel循环执行该中断线上注册的所有irqaction->handler
函数，把识别究竟是哪个硬件设备产生了中断这件事交给中断处理函数本身去做，那
request_irq的dev_id参数究竟是做什么用的？
　　很多资料中都建议将设备结构指针作为dev_id参数。在中断到来时，迅速地根据硬件
寄存器中的信息比照传入的dev_id参数判断是否是本设备的中断，若不是，应迅速返回。
这样的说法没有问题，也是我们编程时都遵循的方法。但事实上并不能够说明为什么中断
共享必须要设置dev_id。

　　下面解释一下dev_id参数为什么必须的，而且是必须唯一的。
　　当调用 free_irq注销中断处理函数时（通常卸载驱动时其中断处理函数也会被注销
掉），因为dev_id是唯一的，所以可以通过它来判断从共享中断线上的多个中断处理程序
中删除指定的一个。如果没有这个参数，那么kernel不可能知道给定的中断线上到底要删
除哪一个处理程序。
　　注销函数定义在Kernel/irq/manage.c中定义：
　　void free_irq(unsigned int irq, void *dev_id)

*******************************************************************************
五、S3C2410子中断的注册的实现
*******************************************************************************

5.1 S3C2410子中断注册问题的提出

　　参看3.5节中判断中断号的方法，可以看到只是通过S3C2410中断控制器中的
INTOFFSET寄存器来判断的。对于INTPND中的EINT4_7, EINT8_23, INT_UART0, INT_ADC等
带有子中断的向量，INTOFFSET无法判断出具体的中断号。平台留给我们的注册方法如下：

    在include/asm/arch/irqs.h中有类似如下定义：
　　/* interrupts generated from the external interrupts sources */
　　#define IRQ_EINT4 S3C2410_IRQ(32) /* 48 */
　　#define IRQ_EINT5 S3C2410_IRQ(33)
　　#define IRQ_EINT6 S3C2410_IRQ(34)
　　#define IRQ_EINT7 S3C2410_IRQ(35)
　　#define IRQ_EINT8 S3C2410_IRQ(36)
　　#define IRQ_EINT9 S3C2410_IRQ(37)
　　#define IRQ_EINT10 S3C2410_IRQ(38)
　　#define IRQ_EINT11 S3C2410_IRQ(39)
　　#define IRQ_EINT12 S3C2410_IRQ(40)
　　#define IRQ_EINT13 S3C2410_IRQ(41)
　　#define IRQ_EINT14 S3C2410_IRQ(42)
　　#define IRQ_EINT15 S3C2410_IRQ(43)
　　#define IRQ_EINT16 S3C2410_IRQ(44)
　　#define IRQ_EINT17 S3C2410_IRQ(45)
　　#define IRQ_EINT18 S3C2410_IRQ(46)
　　#define IRQ_EINT19 S3C2410_IRQ(47)
　　#define IRQ_EINT20 S3C2410_IRQ(48) /* 64 */
　　#define IRQ_EINT21 S3C2410_IRQ(49)
　　#define IRQ_EINT22 S3C2410_IRQ(50)
　　#define IRQ_EINT23 S3C2410_IRQ(51)

　　可以看到平台为每种子中断都定义了中断号，如果你想实现EINT10的中断注册，直接
按照IRQ_EINT10这个中断号注册都可以了。那么平台代码是如何实现这部分中断注册的呢？

5.2 S3C2410子中断注册问题的解决

/*arch/arm/plat-s3c24xx/irq.c*/
void __init s3c24xx_init_irq(void)
{……
　　set_irq_chained_handler(IRQ_EINT4t7, s3c_irq_demux_extint4t7);
　　set_irq_chained_handler(IRQ_EINT8t23, s3c_irq_demux_extint8);
　　set_irq_chained_handler(IRQ_UART0, s3c_irq_demux_uart0);
　　set_irq_chained_handler(IRQ_UART1, s3c_irq_demux_uart1);
　　set_irq_chained_handler(IRQ_UART2, s3c_irq_demux_uart2);
　　set_irq_chained_handler(IRQ_ADCPARENT, s3c_irq_demux_adc);
　　……
}

　　平台在初始化时会调用到s3c24xx_init_irq，在此函数中实现了对EINT4_7, 
EINT8_23, INT_UART0, INT_ADC等中断的注册。下面看看这些带有子中断的中断号对应的
处理函数的内容。以IRQ_EINT4t7为例，其它情况类似。
/*arch/arm/plat-s3c24xx/irq.c*/
s3c_irq_demux_extint4t7(unsigned int irq,
			struct irq_desc *desc)
{
　　unsigned long eintpnd = __raw_readl(S3C24XX_EINTPEND);
　　unsigned long eintmsk = __raw_readl(S3C24XX_EINTMASK);
　　eintpnd &= ~eintmsk;
　　eintpnd &= 0xff; /* only lower irqs */
　　/* eintpnd中可以有多个位同时置1，这一点和intpnd的只能有1个位置1是不一样的 */
    //循环执行所有置位的子中断
　　while (eintpnd) {
	　　irq = __ffs(eintpnd);//算出第一个不为0的位
	　　eintpnd &= ~(1<<irq);//清除相应的位
	　　irq += (IRQ_EINT4 - 4);//算出对应的中断号
	　　desc_handle_irq(irq, irq_desc + irq);//执行对应子中断的注册函数
    }
}
　　从上面的函数可以看出子中断是如何注册及被调用到的。有人可能会问为何不在
include/asm/arch-s3c2410/entry-macro.s 文件中get_irqnr_and_base函数判断中断号
时，直接算出对应的子中断号，就可以直接找到子中断处理了呢？
　　原因是: get_irqnr_and_base是平台给系统提供的函数，对于多个子中断同时置位的
情况无法通过一个值返回（因为子中断中，如eintpnd是可以多个位同时置位的））。而
intpnd则没有这个问题。

*******************************************************************************
疑问
*******************************************************************************
0. 内核中断处理的三层抽象模型。
	highlevel driver api
	highlevel irq flow handlers
	chiplevel hardware encapsulation
    每个中断都由一个中断描述结构irq_desc来描述，描述符结构是一个数组。
高层驱动的API
	request_irq()
	free_irq()
	disable_irq()
	enable_irq()
	set_irq_chip()
	...

高层IRQ处理器
	handle_level_irq()
	handle_edge_irq()
	hanlde_simple_irq()
	handle_percpu_irq()
	handle_fasteoi_irq()
这一类处理程序在系统初始化或者设备初始化的过程中被设置好。
这些函数通过set_irq_handler来设定。

Chip层封装
	ack()		这三个是必须的
	mask()
	unmask()
	...

在./kernel/irq/handle.c中有一个irq_desc[NR_IRQS]数组，保存了系统内所有中断线的
描述。且看irq_desc结构的定义如下，位于./include/linux/irq.h中：
struct irq_desc {
	unsigned int		irq;
	struct timer_rand_state *timer_rand_state;
	unsigned int            *kstat_irqs;
#ifdef CONFIG_INTR_REMAP
	struct irq_2_iommu      *irq_2_iommu;
#endif
	irq_flow_handler_t	handle_irq;
	struct irq_chip		*chip;
	struct msi_desc		*msi_desc;
	void			*handler_data;
	void			*chip_data;
	struct irqaction	*action;	/* IRQ action list */
	unsigned int		status;		/* IRQ status */

	unsigned int		depth;		/* nested irq disables */
	unsigned int		wake_depth;	/* nested wake enables */
	unsigned int		irq_count;	/* For detecting broken IRQs */
	unsigned long		last_unhandled;	/* Aging timer for unhandled count */
	unsigned int		irqs_unhandled;
	spinlock_t		lock;
#ifdef CONFIG_SMP
	cpumask_var_t		affinity;
	unsigned int		node;
#ifdef CONFIG_GENERIC_PENDING_IRQ
	cpumask_var_t		pending_mask;
#endif
#endif
	atomic_t		threads_active;
	wait_queue_head_t       wait_for_threads;
#ifdef CONFIG_PROC_FS
	struct proc_dir_entry	*dir;
#endif
	const char		*name;
}
这个结构比较大，我们只关注其中的几个成员，一个是handle_irq，一个是chip，一个是
action。action是个链表，多个中断处理程序可以共享同一条中断线，它们构成action链
表，通过dev_id来区别不同的中断处理函数。

1. vector_stub宏的作用目的以及实现方法？
	vector_irq
	vector_und
	...
	等异常入口函数把相同的代码用vector_stub宏来实现了，然后在那些dispatcher
	的一条汇编指令
		vector_stub	irq, IRQ_MODE, 4
	会被展开为vector_irq:
			...
	跳转到vector_irq位置，顺序执行展开的vector_stub宏的代码，然后通过
	dispatcher表进入对应的处理，这里只可能是两种，__irq_usr或者__irq_svc
	通过进入中断前所处的模式来确定进入哪一种。而vector_stub所做的工作主要
	就是保存现场，包括lr和spsr。这点需要再进一步的分析。
	进入__irq_xxx（以__irq_usr为例）之后就去执行该子例程对应的代码，在里面
	会调用irq_handler宏，这个宏会调用get_irqnr_and_base计算中断号，然后调
	用asm_do_IRQ函数。这是一个C函数，定义在arch/arm/kernel/irq.c中，前面的
	asmlinkage在arm中定义为空，x86等其他架构上有意义，主要是参数是通过寄存
	器还是通过栈来传递（这个需要确定，这里是道听途说）。这个函数首先把寄存
	器保存到栈上（pt_regs），然后通知进入中断上下文，然后根据中断是否合法
	调用相应中断处理程序，之后再通知中断结束，退出中断上下文，从栈上恢复寄
	存器（pt_regs）。
	entry-armv.S中的几个宏
	宏vector_stub调整LR_irq并保存r0,lr,即中断之前的PC，断点。
	注意后面的dispatcher必须和vector_stub宏的调用者紧邻，这样跳转才能正确。
	在中断的时候经中断向量表的b vector_irq + stubs_offset。保存SPSR_irq即中
	断前的CPSR到栈上。然后根据进入中断前处于什么模式跳转到irq_usr或irq_svc.
	svc_entry宏主要是在当前堆栈上分配一个pt_regs结构，保存一组寄存器到栈
	上，pt_regs共包含18个寄存器，分别是R0-R15, CPSR, R0_orig。

	中断处理程序这里有两种，一种是通知产生了一个错误中断，可能简单的打印
	一条出错信息。
	另一种是generic_handle_irq(irq);它通过irq_to_desc()把irq对应的
	irq_desc数据结构传递给函数generic_handle_irq_desc()，后者通过调用
	irq_desc数据结构的中的handle_irq或者通过调用__do_IRQ来进入下一步操作。
	这里先说irq_desc.handle_irq，这个是高层的irq处理函数，一共有四个
		handle_level_irq(irq, *irq_desc);
		handle_edge_irq(irq, *irq_desc);
		hanlde_simple_irq(irq, *irq_desc);
		handle_percpu_irq(irq *irq_desc);
	这里以handle_level_irq为例来进行说明。在这里它会调用一些通用的内核中断
	函数对中断做确认和关闭操作并判断和设置相应的中断状态，然后取得irq_desc
	的action，即驱动(??)注册的中断处理函数。通过调用handle_IRQ_event()执行
	中断处理函数。然后做改变状态，打开中断等操作退出处理。
	在handle_IRQ_event中，会遍历执行action链表上注册的所有有效处理函数。并
	根据对应的状态标志进行内核熵贡献以及是否为快速中断等判断和操作。
	如果没有irq_desc.handle_irq（除了if判断，这里还有一个配置项
	    CONFIG_GENERIC_HARDIRQS_NO__DO_IRQ，如果该配置项被配置，__do_IRQ根
	本不会被编译，这也主要是为了优化中断处理速度。）那么就会调用__do_IRQ来
	处理。这个函数感觉像是上古时代遗留的产物，在这里内核中断模型的三个层次
	还不是那么清晰。当然它所完成的工作就是调用芯片的一些操作进行中断确认，
	中断状态更新，然后在一个循环中调用handle_IRQ_event()执行所有注册的中断
	处理函数。最后做退出处理，通知硬件。

2. irq_handler是如何作用的，它做了哪些工作？
3. 中断处理的整体流程？ 
4. __irq_usr和irq_svc的作用是什么？
5. 现场是如何保存和恢复的？
6. VIC的特性能否在Linux中得到利用？
7. irqaction和irq_desc是什么关系？
	irq_desc包含了一个irqactions链表，如果该中断线共享，则会顺序执行链上的
	所有中断处理程序。
	系统时钟通过setup_irq注册中断处理程序，是一个特例。而其他的中断处理程序
	是通过request_irq来注册的。该函数由于要使用内存动态分配机制，由于
	timer_init()在mem_init()之前调用，此时内存动态分配机制还没有建立，所以
	系统时钟的中断注册需要用另外的非动态分配的实现。
8. 向量表的建立过程
      start_kernel() -> setup_arch -> early_trap_init() -> "copy vector table"
   early_trap_init()中为什么要把中断向量分配器拷贝到vectors+0x200这个位置？
   因为这里做得是中断向量表的初始化，需要将中断向量表拷贝到固定的位置，这里根据
   情况是0x00000000或者0xFFFF0000，中断向量表中应用的是b指令，它的跳转有+/-32MB
   的范围限制，所以需要将分配器拷贝到vectors+0x200位置，且分配器代码长度不得超 
   过0x300大小，这样才可以实现跳转。
   在trap_init之后还要调用early_irq_init()和init_IRQ()去设置中断。init_IRQ还会调用init_arch_irq。这个函数指针在setup_arch的时候被赋值，指向machine_desc结构的
irq_init指针
9. 四个高层IRQ处理器各自有什么区别，分别应用于什么场合
且看如下流程区别
handle_level_irq流程
	desc->chip->start();
	handle_IRQ_event(desc->action);
	desc->chip->end();

handle_edge_irq流程
	if (desc->status & running) {
		desc->chip->hold();
		desc->status |= pending | masked;
		return;
	}
	desc->chip->start();
	desc->status |= running;
	do {
		if (desc->status &amp; masked)
			desc->chip->enable();
		desc->status &amp;= ~pending;
		handle_IRQ_event(desc->action);
	} while (status & pending);
	desc->status &= ~running;
	desc->chip->end();

handle_simple_irq流程
	handle_IRQ_event(desc->action);

handle_per_cpu_irq()
	desc->chip->start();
	handle_IRQ_event(desc->action);
	desc->chip->end();

10. irq中断时的的堆栈变化情况？
*******************************************************************************
VSC7501以及VIC相关
*******************************************************************************

1. VIC Port的作用？
如果把VIC映射到推荐的地址0xFFFFF000，并且编辑地址0x18，比如向量表中的IRQ向量
地址，写入：
	LDR PC, [PC, #-0x120]
Core就会从VICADDRESS寄存器中读取到当前活跃中断的处理函数地址并执行。
如果是处理非向量中断，core就必须在0x18处安排一条跳转到中断分发器的跳转指令以便
询问中断控制器查找出当前应该处理的中断

2. 如果中断处理程序没有除去中断将会发生什么？
IRQ/FIQ在确认中断前（除去中断）都不应该重新打开中断（设置CPSR的I/F标志位），否
则中断将立即嵌套产生。

注意：流水线冒险
由于后续的ARM核存在流水线冒险的情况，必须保证在确认（清除）中断和重新打开中断之
间有足够的时间保证中断已经被清除。
看如下例子：
	STR r1, [r0]	;清除中断
	MSR cpsr_c, r2	;打开中断
在ARM9TDMI之后的arm核，STR访问存储器少至一个时钟周期.....略
所以arm推荐在异常处理程序一开始处就首先确认中断。在最后重新打开中断。如果支持中
断嵌套的话，也要保证在二者之间有足够的时间。

3. 内核中已经实现的VIC功能
内核对VIC的利用仅有小部分功能。
 ＠ 利用VIC，可以加速中断处理，通过利用REGVICADDR。
 ＠ 利用VIC，可以实现中断优先级的编程控制。Sharp的lh7a404实现了这一点功能。
 ＠ get_irqnr_and_base，Sharp的这部分代码要比非向量的中断大。
 ＠ 向量地址，Linux目前还不支持，但以后可能会支持。
 ＠ Sharp lh7a404如何利用VICADDRESS
    ＠用该寄存器的低6位来表示中断号，范围为0～63，共64个中断，对应irqstatus状态
    ＠用第8位来标识向量中断，第9位和第10位来标识在VIC0和VIC1上的非向量中断
    ＠全0表示没有活跃中断

9. RT_CORE的四个中断各有什么用处？
