Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

#include <fcntl.h>
int open(const char *pathname, int oflag, ... /* mode_t mode */ );
成功返回文件描述符，出错返回-1； 第三个参数仅在创建文件时使用。
oflag, 三个有且仅有一个的标志O_RDONLY, O_WRONLY, O_RDWR以及一些可选标志
文件名长度大于NAME_MAX时会返回错误（Linux）
第三个参数模式是用来指定st_mode的，这个参见后面stat数据结构的内容。

#include <fcntl.h>
int creat(const char *pathname, mode_t mode);
成功返回只写的文件描述符，出错返回-1；
等价于 open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);
历史上open函数的第二个参数值可能是0, 1, 2，无法用open函数来创建文件，所以需要
多一个creat函数，现在creat函数已经可以完全不用了。creat函数返回的是只写的文件
描述符，这一点要注意。

#include <unistd.h>
int close(int fd);
成功返回0，出错返回-1。
文件关闭会释放该进程在该文件上的所有锁。

#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
成功返回新的文件偏移，失败返回-1。通常打开文件的偏移是个非负整数。
已经打开文件的偏移可以通过lseek来设置
whence参数用来设置offset的基准 SEEK_SET表示从文件头部开始offset位置，SEEK_CUR
表示从当前开始offset位置，SEEK_END表示从文件尾部开始offset位置。
由于lseek返回调用后的文件偏移，我们可以用当前0偏移来确定当前文件的偏移
同样可以用这个函数来判断某个文件是否支持seek。通常文件的当前偏移必须是非负整数
但是某些特定设备允许负的偏移。但对于常规文件，偏移必定是非负的。
lseek函数可以在文件中创造出洞来，这个洞磁盘并不会给它分配空间。文件大小会变化
但是并不会给洞分配磁盘块。

#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);
成功返回读到的字节数，读到文件尾返回0，失败返回-1。
实际读到的字节数小于请求的字节数的可能是因为：常规文件读到EOF；终端通常按行读；
网络缓存大小小于请求字节数；管道内的内容少于请求字节数；面向记录的设备每次按记
录返回；被信号打断。

#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);
成功返回写入的字节数，失败返回-1。通常返回值等于请求写入的字节数，否则，发生错
误。通常是由写满或者超出了给定进程的文件大小限制。

文件共享
内核使用三个数据结构来表征一个打开的文件，它们的关系决定了一个进程如何共享文件
1. 每个进程在进程表中有一项，表示该进程所打开的文件描述符，可以看作向量，每文
件描述符一个入口。关联到每个文件描述符的有：文件描述符标志和到一个文件表项的指
针。
2. 内核为所有打开的文件维护了一个文件表。每个文件表项包括：文件状态标志（读、
写、添加、同步和非阻塞）；当前文件偏移；到该文件v-node表项的指针。
3. 每个打开的文件（或者设备）有一个v-node数据结构包含了文件类型和文件操作方法
等信息。对于大多数文件，v-node也包含文件的i-node。该信息时在文件打开时从磁盘上
读取的。（Linux没有v-node，相反，它使用一个通用的i-node数据结构。尽管实现不同，
v-node和通用i-node在概念上是相同的都是指向一个特定文件系统的i-node数据结构。）
v-node机制是用来支持多种类型的文件系统的。Linux使用了文件类型无关的i-node和文
件类型相关的i-node来实现这种类似的结构。
当两个进程同时打开一个文件时，进程表中的entry是各自的不同的，file table也是各自
的不同的（由于不同的文件偏移） ，而v-node表则是同一的。
文件描述符标志和文件状态标志

原子操作
#include <unistd.h>
ssize_t pread(int fd, void *buf, size_t nbytes, off_t offset);
ssize_t pwrite(int fd, const void *buf, size_t nbytes, off_t offset);

#include <unistd.h>
int dup(int fd);
int dup2(int fd1, int fd2);
复制文件描述符

#include <unistd.h>
int fsync(int fd);
int fdatasync(int fd);
成功返回0，出错返回-1；
void sync(void);
传统UNIX系统实现会在内核中有一个缓冲区
sync简单的将所有改动的块缓冲区写入并返回，不会等待磁盘。sync通常会在一个系统守
护进程update中被周期性的调用（通常每30秒）。保证了定期冲刷内核块缓冲区。sync命
令也是调用sync函数的。
fsync仅引用由文件描述符指定的一个文件，并等待磁盘写入完成才返回。它主要给应用
程序来使用，比如数据库需要保证写入成功。它也会同时更新文件属性。
fdatasync，类似fsync，但是不更新文件属性。

#include <fcntl.h>
int fcntl(int fd, int cmd, ... /* int arg */ );
成功根据cmd返回，出错返回-1
fcntl可以更改一个打开文件的属性
fcntl可以由五个用途：复制一个已经存在的文件描述符（cmd = F_DUPFD）；获得或者设
置文件描述符标志（cmd = F_GETFD 或 F_SETFD）；获取或者设置文件状态标志（cmd = 
F_GETFL或者F_SETFL）；或取或者设置匿名IO所有者（cmd = F_GETOWN或F_SETOWN）；或
取或者设置记录锁（cmd = F_GETLK, F_SETLK或者F_SETLKW）。
复制文件描述符F_DUPFD，会复制文件描述符，新的文件描述符作为函数返回值返回。
获得文件描述符标志F_GETFD，返回文件描述符标志。FD_CLOEXEC
设置文件描述符标志F_SETFD
获得文件状态标志F_GETFL，（O_RDONLY, O_WRONLY, O_RDWR
	O_APPEND, O_NONBLOCK, O_SYNC, O_DSYNC, O_RSYNC, O_FSYNC, O_ASYNC）
	前三个的掩码O_ACCMODE。
设置文件状态标志F_SETFL。文件访问模式标志是不可以改变得。
获得接收SIGIO和SIGURG信号的进程ID（返回正值）或者进程组ID（返回负值） F_GETOWN
设置接收SIGIO和SIGURG信号的进程ID或者进程组ID，正数arg指定进程ID，负值arg的绝对
	值指示进程组ID

#include <unistd.h>		/* System V */
#include <sys/ioctl.h>		/* BSD and Linux */
#include <stropts.h>		/* XSI Streams */
int ioctl(int fd, int request, ...);
出错返回-1，成功返回其它值

#include <sys/stat.h>
int stat(const char *restrict pathname, struct stat *restrict buf);
int fstat(int fd, struct stat *buf);
int lstat(const char *restrict pathname, struct stat *restrict buf);
成功返回0，出错返回-1。

struct stat {
	mode_t	st_mode;	/* 文件类型和模式（权限） */
	ino_t	st_ino;		/* i-node号 */
	dev_t	st_dev;		/* 设备号 */
	dev_t	st_rdev;	/* 特殊文件设备号 */
	nlink_t	st_nlink;	/* 链接数 */
	uid_t	st_uid;		/* 所有者uid */
	gid_t	st_gid;		/* 所有者组id */
	off_t	st_size;	/* 常规文件，大小，字节为单位 */
	time_t	st_atime;	/* 最近访问时间 */
	time_t	st_mtime;	/* 最近修改时间 */
	time_t	st_ctime;	/* 最近文件状态更改时间 */
	blksize_t	st_blksize;	/* 最好IO块大小 */
	blkcnt_t	st_blocks;	/* 分配的磁盘块大小 */
};


文件类型：
常规文件
目录文件：包含其他文件名字和到这些文件信息的指针。任何对该目录文件有读权限的进程都可以读目录内容，但是只有内核可以直接写目录文件。
块设备文件：提供到设备的固定大小单元访问的缓冲IO的文件类型
字符设备文件：提供到设备可变大小单元访问的不缓冲IO的文件类型，系统内的设备或者
是块设备文件，或者是字符设备文件
FIFO：用于进程间通信的一种文件，有时叫做命名管道。
套接字：用于进程间网络通信的一种文件。套接字也可以用于单机上的进程间非网络通信。
符号链接：指向其它文件的文件

文件类型编码在stat数据结构的st_mode成员中。可以用如下宏来判断一个文件是什么类
型，参数为stat结构的st_mode成员：S_ISREG(), S_ISDIR(), S_ISCHR(), S_ISBLK(),
	S_ISFIFO(), S_ISLNK(), 	S_ISSOCK()
POSIX允许将IPC对象实现成文件，比如消息队列，信号，共享内存等。以下宏可以在stat文件中判断IPC类型，它们不使用stat结构的st_mode成员作参数，而使用指向stat结构的指针
S_TYPEISMQ(), S_TYPEISSEM(), S_TYPEISSHM()，但是没有一个这里提到的UNIX系统将这
些对象实现成文件。

设置用户ID和设置组ID
每个进程关联了六个以上（包括六个）的ID：
实际用户ID和实际组ID；
有效用户ID和有效组ID，补充组ID（用于文件访问权限检查）；
保存设置用户ID和保存设置组ID；当一个程序执行时包含有效用户ID和有效组ID的拷贝。
通常有效用户ID等于实际用户ID，有效组ID等于实际组ID。每个文件都有一个属主和属组。
属主由st_uid确定，属组有st_gid确定。

当我们执行一个程序文件的时候，进程的有效用户ID通常是实际用户ID，有效组ID通常是
实际组ID。但是可以把某个文件的模式字st_mode中设置一个特殊标志，使得在执行该文
件的时候以该文件的属主来执行，即进程的有效用户ID为文件的属主。类似的另外一个位
也可以设置，使得有效组ID为文件的属组(st_gid)。这样在st_mode中的这两个位就被称
为设置用户ID位和设置组ID位。
这两个位可以用S_ISUID和S_ISGID宏来测试。

文件存取权限
st_mode值还编码了文件的存取权限位。所有类型的文件都有存取权限。每个文件有九个
权限位，分类三个类别。掩码宏如下：
#include <sys/stat.h>
S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH
这里的用户指的是文件属主。
目录的读权限和执行权限：读权限允许我们获得目录下的文件名，执行权限允许我们访问
该目录下的文件。
删除一个指定的文件，需要文件所在目录的写和执行权限，而不需要关心文件本身的权限
可执行文件必须是常规文件。
每当一个进程打开，创建和删除一个文件时内核都会进行文件访问测试，如果支持的话，
两个所有者ID是文件的属性，两个有效ID和补充组ID是进程的属性。内核的测试过程是：
1. 如果（进程的）有效用户ID是0（超级用户），允许访问。这给了超级用户访问整个系
统的权限。
2. 如果（进程的）有效用户ID等于文件属主ID，则如果合适用户权限设置的话允许访问。
3. 如果（进程的）有效组ID或者其中一个补充组ID等于文件的属组ID，则如果合适组访
问权限设置的话允许访问。否则拒绝访问。
4. 如果合适的其他（other）访问权限设置的话，允许访问，否则拒绝访问。
四步按序列尝试，并且如果已经在某一步上匹配（允许或者拒绝），则后续不进行测试。

新文件或目录的所有权
新文件的用户ID被设置为（进程的）有效用户ID，组ID的话POSIX规定可选以下一种实现：
1. （进程的）有效组ID作为新文件的组ID
2. 新文件的组ID是新文件所在目录的组ID

#include <unistd.h>
int access(const char *pathname, int mode);
成功返回0，出错返回-1。
用于测试实际用户ID和实际组ID对文件的访问权限，mode是如下常量的或运算结果。
R_OK, W_OK, X_OK, F_OK(测试文件存在)

#include <sys/types.h>
#include <sys/stat.h>
mode_t umask(mode_t mask);
返回上个文件模式的创建掩码
用来设置进程的文件创建模式掩码并返回旧的值。无错误返回值。
mask由九种常量的或运算构成

#include <sys/stat.h>
int chmod(const char *pathname, mode_t mode);
int fchmod(int fd, mode_t mode);
成功返回0，出错返回-1；
前者操作指定文件，后者操作已经打开的文件。更改一个文件的权限位，（进程的）有效
用户ID必须等于文件属主ID或者进程拥有超级用户权限。
这里mode有S_ISUID（执行设置用户ID），S_ISGID（执行设置组ID），S_ISVTX（），S_IRWXU（属主读写执行），S_IRWXG，（属组读写执行），S_IRWXO（其它读写执行），以及九个权限位
粘滞位Linux下对于常规文件没有意义，在其他系统中，该位仅有超级用户可以设置。
早期粘滞位用来在程序退出时将程序的正文段保存在交换区以便加快下次载入的速度。如
今这个功能已经不重要甚至消失了。在同时代的某些系统中粘滞位的功能被扩展，粘滞位
可以设置到目录文件，如果一个目录被设置了粘滞位，那么目录内的文件只有在用户对该
目录有写权限或者拥有该文件或者拥有该目录或者是超级用户时才可创建和删除。

#include <unistd.h>
int chown(const char *pathname, uid_t owner, gid_t group);
int fchown(int fd, uid_t owner, gid_t group);
int lchown(const char *pathname, uid_t owner, gid_t group);
成功返回0，出错返回-1
用于改变文件的属主和属组，如果参数中的owner或者group是-1，则对应ID不会改变
Linux只允许超级用户改变文件的属主和属组。

文件大小
st_size成员说明了以字节计数的文件大小。这个只对常规文件、目录文件和符号链接文
件有意义。Solaris还定义了管道的文件大小表示管道内可读字节数。
对于常规文件，允许文件大小为0。这样读到的第一个字符就是EOF
对于目录文件，文件大小通常是某个数字的倍数，比如说16或者512
对于符号链接文件，文件大小就是链接的文件的文件名大小
st_blksize和st_blocks，前者指该文件IO操作时推荐的块大小，后者指该文件分配的512
字节块数量。出于效率考虑，一次read或者write读写st_blksize大小的块。
注意512字节大小的块是系统相关的，不可移植。

#include <unistd.h>
int truncate(const char *pathname, off_t length);
int ftruncate(int fd, off_t length);
成个返回0，出错返回-1
用于将文件截断到指定长度，如果原来文件大于这个指定长度，那么就截断到这个大小，
如果小于的行为则是系统相关的。

文件系统
i-node是固定长度的项，包含了文件的大部分信息。每个i-node有一个链接计数器计数指
向该i-node的目录项的数目。当链接技术减到0时，该文件就会被删除。
这个链接计数在st_nlink中，类型为nlink_t，这叫做硬链接。硬链接有数量限制LINK_MAX
i_node包含文件的所有信息：文件类型，文件访问权限位，文件大小，到文件数据块的指
针等等。stat数据结构内的大部分信息是从i-node中获取的。有两项是存在目录项中的：
文件名和i-node号。至于文件名长度，目录记录长度这里不讨论。i-node号的数据类型
是ino_t。
为什么硬链接不可以跨文件系统？
因为目录项内的i-node号指向相同文件系统的一个i-node，我们不可以把一个目录项指向
一个不同的文件系统。
同分区内重命名的过程或者mv的过程：不需要移动数据，仅需要在目录中增加一个目录项
指向已有的i-node，然后unlink老的目录项。
目录的链接数：目录至少关联到目录名和.两个链接，最小链接数为2（叶目录），每在目
录下创建新的目录项，该目录的链接数就增加1。这里的目录下指直接子目录，即子目录
的创建和删除会影响父目录的链接数量。

#include <unistd.h>
int link(const char *existingpath, const char *newpath);
成功返回0，失败返回-1
创建一个硬链接。如果新的路径名已经存在则出错。只创建最后一级，路径前面的必须是
已经存在的。创建和链接增加应该是原子操作。给目录建立硬链接需要具有超级用户权
限。因为这会引起文件系统中出现环。

#include <unistd.h>
int unlink(const char *pathname);
成功返回0，出错返回-1
