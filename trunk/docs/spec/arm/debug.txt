srst, trst
*******************************************************************************
ARM architecture reference manual
*******************************************************************************
调试架构介绍
*******************************************************************************
armv6是第一版包括调试的架构。在此之前，大多数实现是把调试作为一个附件通过
EmbeddedICE宏单元与事实标准建立联系的。
全特性的EmbeddedICE功能传统上只能通过一个外部的调试接口才可用。


*******************************************************************************
ARM9EJS technical reference manual
*******************************************************************************
调试接口和EmbeddedICE-RT
*******************************************************************************
关于调试接口
ARM9EJ-S核心调试接口是基于IEEE标准1149.1-1990，标准测试访问端口和边界扫描架构。
本章所用术语和TAP控制器状态描述可参考这篇标准。

停止模式
在停止模式下调试，调试扩展使核心强制进入调试模式。在调制模式下，核心停止运行并
且与系统地其它部分隔绝开来。这使得在系统其它部分仍正常活动的情况下可以检查核心
内部的状态和系统的外部状态。

监控模式
在断点或者观察点处，会产生一条指令异常或者数据异常而不是进入停止模式。当在执行
关键中断处理程序时使用调试监控程序连接ARM9EJ-S核心。调试监控程序通过ARM9EJ-S核
心的调试通信信道与主机的调试监控程序通信。

调试系统
ARM9EJ-S核心构成了调试系统的一部分，该系统包括由你来执行的高层调试和由ARM9EJ-S
核心实现的底层接口。调试系统结构如下图所示：

    +------------+        +------------+        +----------+
    |            | -----> |            | -----> |          |
    |  调试主机  |        | 协议转换器 |        | 调试目标 |
    |            | <----- |            | <----- |          |
    +------------+        +------------+        +----------+

一个调试系统通常有三部分组成：
	调试主机
	协议转换器
	调试目标（ARMEJ-S核心）

调试主机
调试主机运行有软件调试器，比如armsd。调试主机使你能够发送高级命令，比如设置断
点或者检查内存的内容。

协议转换器
一个RS232或者并口之类的接口把调试主机和ARM9EJ-S目标开发系统连接起来。从这个连
接广播的消息必须转换成ARMEJ-S核心的接口信号。协议转换器就是实现这个功能的。

调试目标（ARM9EJ-S核心）
ARM9EJ-S核心拥有能够在底层实现调试的硬件扩展。该调试扩展：
	使你能够通过核心暂停程序执行
	检查核心的内部状态
	检查存储系统的状态
	继续执行程序
ARM9EJ-S核心的主要模块包括：
	ARM9EJ-S核心，这个是CPU核心，对调试提供硬件级的支持
	EmbeddedICE-RT逻辑：一组用来产生调试异常（比如断点）的寄存器和比较器
	TAP控制器：这个通过JTAG串行接口来控制扫描链的动作
	ARM9EJ-S ETM接口：这个接口使ETM到核心的连接变得方便。

在停止模式下，一个在外部调试接口信号或者内部EmbeddedICE-RT逻辑功能模块的请求，
强制ARM9EJ-S核心进入调试模式。激活调试的事件是：
	一个断点（一个给定的取指令操作）
	一个观察点（一个数据访问）
	一个外部调试请求
	扫描调试请求（一个扫描入EmbeddedICE-RT延迟控制寄存器的调试请求）
ARM9EJ-S核心的内部状态是通过JTAG串行接口检查的，它可以指令串行的加入到核心流水
线内而不是使用外部数据总线。所以，比如当在调试模式时，一个store multiple操作可
以加入到指令流水线，然后它可以导出ARM9EJ-S的所有寄存器内容。这些数据可以串行的
移出来而不会影响系统的其它部分。

关于EmbeddedICE-RT
ARM9EJ-S的EmbeddedICE-RT逻辑给ARM9EJ-S核心提供了片上调试功能。
EmbeddedICE-RT是通过ARM9EJ-S的TAP控制器串行编程的。图6-3显示了EmbeddedICE-RT，
TAP控制器与核心的关系。它只显示了与Embedded-ICE相关的信号。
图6-3
EmbeddedICE-RT逻辑包括：
	两个实时观测点单元
	两个独立寄存器，调试控制寄存器和调试状态寄存器
	调试通信信道
调试控制寄存器和调试状态寄存器提供对EmbeddedICE-RT的全局控制。
你可以编程控制一或两个观测点单元来通过核心停止执行指令。当编入EmbeddedICE-RT的
值和当前地址总线，数据总线以及各种控制信号的值相匹配时执行停止。
注意：你可以屏蔽掉某些位以使它的值不会影响比较。
你可以配置每个观测点为观察点（监控数据访问）或者断点（监控指令获取）。在停止模
式下观察点和断点可以数据相关。
EmbeddedICE-RT逻辑可以配置为一种模式，在该模式下观察点或者断点会相对应的产生数
据或者预取指异常。这激活一个实时调试监控系统用来调试在关键中断处理程序下的ARM。

禁止EmbeddedICE-RT
你可以通过设置DBGEN输入为低来禁止EmbeddedICE-RT。
注意：将DBGEN直接用线连接到低电平将禁止一切调试功能。
当DBGEN为低时，它会禁止DBGDEWPT，DBGIEBKPT，EDBGRQ到核心，并且从ARM9EJ-S出来的
DBGACK始终为低。

调试接口信号
主要有四个外部信号关联到调试接口：
	DBGIEBKPT，DBGDEWPT，EDBGRQ是系统请求ARM9EJ-S核心进入调试模式
	DBGACK是ARM9EJ-S核心向系统返回它已经进入调试模式

在断点处进入调试模式
（延后）
断点和异常
（延后）
观测点
（延后）
观测点和异常
（延后）

调试请求
调试请求可以通过EmbeddedICE-RT逻辑或者EDBGRQ信号产生。该请求被注册并且传送到处
理器。调试请求的优先级高于所有处于等待期的中断。在注册之后，当流水线上处于执行
期的指令完全执行完毕后（存储器和流水线的写阶段结束）核心进入调试状态。在等待指
令执行结束期间，流水线上没有指令会被投入到执行阶段。
当调试请求发生时，ARM9EJ-S核心即使在EmbeddedICE-RT被配置为监控模式时也进入调试
状态。

调试状态下的ARM9EJ-S核心操作
当ARM9EJ-S进入调试状态时，两个内存接口显示内部的周期。这使得存储系统的其余部分
忽略ARM9EJ-S核心并且正常运转。由于系统的其他部分还在运转，ARM9EJ-S核心忽略了异
常和中断。
当处于调试模式时系统不可以改变CFGBIGEND信号。如果改变了，不仅存在一个同步问题，
而且ARM9EJ-S核心的会改变而调试器却并不知青。在调试器件nRESET信号也必须保持稳定。
如果系统向ARM9EJ-S核心施加了复位信号（nRESET被拉低），则ARM9EJ-S核心状态改变，
但是调试器并不了解。

ARM9EJ-S核心时钟域
ARM9EJ-S核心有一个单时钟CLK，通过两个时钟使能信号使能：
·CLKEN控制到存储系统的访问
·DBGTCKEN控制调试操作
在正常操作期间，CLKEN控制CLK给核心提供时钟。当核心处于调试状态时，DBGTCKEN控制
CLK给核心提供时钟

时钟和同步
如果系统和测试时钟是异步的，则它们必须从ARM9EJ-S核心外部进行同步。ARM Multi-ICE
调试代理直接在一个ASCI设计中支持一到多个核心。为了在片外同步ARM9EJ-S核心调试时
钟需要一个3阶段的同步器。片外设备（比如Multi-ICE）发出一个TCK信号，然后等待RTCK
（Returned TCK）信号返回。由于片外设备在收到RTCK之前不会处理下一个TCK这样同步就
保持住了。图6-7显示了这个同步过程。

确定核心和系统状态
当ARM9EJ-S核心处于调试状态时，你可以通过强制多条装载和存储到指令流水线来检查核心
和系统状态。
在你能够检查核心和系统的状态之前，调试器必须确定处理器是否从thumb或者arm状态进入
到了调试状态，通过检查EmbeddedICE-RT调试状态寄存器的第4位。如果第4位为高电平，则
核心已经从Thumb状态进入了调试状态。
关于确定核心状态的详细内容查阅Page B-19。

调试信道
ARM9EJ-S EmbeddedICE-RT逻辑包括一个通信信道，用于在目标机和主机调试器之间通信，
它实现成协处理器14。
通信信道包括：
·一个32位通信数据读寄存器
·一个32位通信数据写寄存器
·一个6位通信控制寄存器，用于处理器和异步调试器之间同步握手
这些寄存器位于EmbeddedICE-RT逻辑的寄存器映射的固定位置并且处理器通过MCR和MRC指令
向协处理器访问。
除通信信道寄存器之外，处理器还可以访问一个1位调试状态寄存器，用于监控模式下的调
试配置。

调试信道寄存器：
·通信信道控制寄存器 C0 只读
·通信信道数据读寄存器 C1 用于（处理器）读
·通信信道数据写寄存器 C1 用于（处理器）写
·通信信道监控模式调试状态寄存器 C2  读/写
在调试器看来，以常规方法通过扫描链访问寄存器。
在处理器看来，以协处理器寄存器传输指令访问这些寄存器。

调试信道控制寄存器
调试信道控制寄存器是只读的
注意：该控制寄存器只可看作是只读的。但是，调试器通过写调试通信信道控制寄存器可以
清除R位。在通常情况下不应该使用这一特性。
该寄存器控制着处理器和调试器之间的同步握手。调试通信信道控制寄存器如图6-8所示。
[31:28]，固定格式的EmbeddedICE版本号
[27: 2]，保留
[1]，标记通信数据写寄存器是否可用（以处理器的视角）。从处理器来看，如果通信信道
数据写寄存器可用（W=0），可以写入新数据。如果不可用（W=1），则处理器轮询知道W=0。
在调试器看来，当W=1时，新的数据被写入，可以扫描出来。
[0]，标记通信数据读寄存器是否有新数据。在处理器看来如果R=1，则可以通过MRC指令读
取新数据。如果R=0，则通信数据读寄存器空闲，新数据可能通过扫描链放到那儿。如果R=1
表示通过扫描链放到那儿的上一个数据还没有被处理其收走，并且调试器必须等待。
你可以用以下指令访问这些寄存器：
MRC p14, 0, RD, c0, c0
这条指令返回调试通信状态寄存器内容到RD
MCR p14, 0, Rn, c1, c0
这条指令将值写入Rn到通信数据写寄存器
MRC p14, 0, Rd, c1, c0
这个在Rd中返回调试数据读寄存器
注意：Thumb指令集不支持协处理器指令。因此在你能够访问调试信息前，核心必须处于ARM
状态。 

调试信道监控模式调试状态寄存器
该寄存器是由一个调试监控器在ARM9EJ-S核心配置为监控调试模式时使用。
协处理器14监控模式调试状态寄存器是个一位宽的读写寄存器，格式如下。
[0]，DbgAbt位。指示处理器在过去是否因为断点或者观察点产生了一个预取指异常或者
数据中止异常。如果产生了，则该位置位。如果在某特定取指或者取数过程中，调试口和
外部异常信号同时发生，并且外部异常占先了，则该位不会置位。可以通过MRC和MCR指令
访问该位。
该位的一个典型应用是由监控模式调试中止识别句柄使用。通过它检查当前中止是外部的
还是内部的。如果该位被置位，则该中止识别句柄与调试器通过调试信道初始化通信。

使用调试通信信道进行通信
你可以使用调试通信信道发送和接收消息。

向调试器发送消息：
在处理器能够向调试器发送消息前，它必须检查调试通信控制寄存器的W位是否被清零以
检测通信数据写寄存器是否空闲。
  如果W位被清零，则通信数据写寄存器被清零
  如果W位被置位，则上次写入的数据还没有被调试器取走。处理器必须轮询直到该位清零
当W位被清零，一条消息通过一个寄存器传送到协处理器14，并且W位置位。
调试器有两种选择来从通信数据些寄存器中读取数据：
  在读取通信数据前轮询调试通信信道控制寄存器。当W位被置位后，在调试通信数据写
  寄存器中存放了有效数据。调试器可以读取该数据并将该数据扫出。读取操作会清零W
  位。然后通信过程可以继续。
  轮询通信数据写寄存器，获取数据和有效状态。扫描出的数据包括通信数据写寄存器的
  内容和一个指示数据是否有效的状态标记。状态标记位于扫描链2的Addr[0]位置。

从调试器接收消息：
从调试器传输消息到处理器和发送消息到调试器类似。在这种情况下，调试器轮询调试通
信控制寄存器的R位。
  如果R位被清零，则通信数据读寄存器空闲，则数据可以放在那里以便处理器来读。
  如果R位被置位，则上一次写入的数据还没有被处理器取走，所以调试器必须等待。
当通信数据读寄存器空闲时，通过JTAG接口将数据写入。这个动作会把R位置位。
处理器轮询调试通信控制寄存器。如果R位被置位，则可以通过MRC指令从协处理器14取走
该数据，并且该动作会把R位清零。当调试器轮询该寄存器看到该位被清零以后，表示数据
已经被取走，则又可以开始下一轮。

复位通信信道
在复位过程中通信信道有如下行为：
  在DBGnTRST(0)上施加复位信号时：
    通信信道CP14的访问是无去抖的
    读取调试通信信道控制寄存最低两位返回10（写寄存器非空，读寄存器空）。
    DBGCOMMRX异步复位为0
    DBGCOMMTX异步复位为0
  在从DBGnTRST(0)上撤走复位信号时（从0到1），在CLK的下一个上升沿之后：
    读取调试通信信道控制寄存器最低两位返回00（写寄存器空，读寄存器空）。
    DBGCOMMTX置位为1（发送缓存空）

监控模式调试
ARM9EJ-S核心包含能够在不停止整个核心情况下调试系统的逻辑。这可以使在核心和调试
器交互时保证某些关键中断处理程序仍能运行。设置调试控制寄存器的位4则开启ARM9EJ-S
核心的监控模式调试特性。当这位被置位时，EmbeddedICE-RT逻辑被配置为断点和观察点
引起ARM进入相应的预取指或者数据中止模式。当ARM被配置为监控模式调试时有几点需要
注意：
  断点和观察点不可以是数据相关的。不支持范围功能。断点和观察点仅可以是基于：
    指令或者数据地址
    外部观察点条件器（DBGEXTERN）
    用户或者特权模式访问（DnTRANS/InTRANS）
    读/写访问（观察点）
    访问大小（断点ITBIT和IJBIT，观察点DMAS[1:0]）
    比较链
  单步硬件必须禁止
  外部断点或者观察点不支持
  硬件向量捕获可以使用，但不可以捕获预取指或者数据中止异常
  不支持混杂停止模式和监控模式调试
由监控模式产生的中止异常记录在协处理器14的监控模式调试状态寄存器。
由于监控模式调试位没有把ARM9EJ-S核心置于调试状态，则在发生外部存储器访问时更改
观测点寄存器的内容就是必须的了，而在调试状态时是被改变的。在访问过程中，观察点
寄存器的写入事件，所有从使用该正在更新的寄存器的观察点模块的匹配在更新期间被禁
止。
如果在改变观察点寄存器过程中有由于某些寄存器中是旧数据而其他是新数据时发生错误
匹配的可能，你必须：
  使用该观察点模块的控制寄存器禁止该观察点
  改变其他寄存器
  向控制寄存器写入重新使能该观察点

