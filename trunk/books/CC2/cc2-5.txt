Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

险恶问题就是那种只有通过解决或部分解决才能被明确的问题。
你必须首先把这个问题“解决”以便能够明确的定义它，然后再次解决该问题。
有限资源的限制，才会促使产生简单的方案，并最终改善这一解决方案，没有时间、资源
和空间的限制，软件会不可思议的随意蔓延。
设计过程充满了不确定性，设计技术也就趋于具有探索性，设计过程总会有试验和犯错。
设计时自然而然形成的，不是凭空想象的，是在不断的设计评估，非正式讨论，写试验
代码和修改试验代码中演化和完善的。
当项目确由技术因素导致失败时，其原因通常就是失控的复杂度。
高代价、低效率的设计源于下面三种根源：
    用复杂的方法解决简单的问题
    用简单但错误的方法解决复杂的问题
    用不恰当的复杂方法解决复杂的问题。

设计的首要目标就是要让复杂度最小，其二要易于维护，其三要松散耦合各部分间关联最
小，其四要可扩展性强，其五要具备可重用性，其六要high fan-in，即让大量的类使用
某个给定的较低层次上的工具类，其七要low fan-out，即以各类里少量或适中的使用其它
的类，其八要可移植，其九要精简，其十要有层次性，其十一要尽量使用标准技术

伏尔泰：一本书的完成，不在它不能再加入任何内容的时候，而在不能再删去任何内容的
时候。（软件也如此）

举例来说，假设你正在编写一个新系统，其中用到很多设计不佳的旧代码，这时你就应该
为新系统编写一个负责同旧代码交互的层。在设计这一层时，要让它能隐藏旧代码的低劣
质量，同时为新的层次提供一组一致的服务。这样，你的系统的其他部分就只需与这一层
进行交互，而无须直接同旧代码打交道了。在这个例子中，层次化设计的益处有：
（1）它把低劣代码的烂泥潭禁闭起来；
（2）如果你最终能抛弃或者重构旧代码，那时就不必修改除交互层之外的任何新代码。

--------------------------------------
References:
Chapter 5
