Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

上层可以把自己的对象交给下层去释放，举例说明。
netlink要发送一个skb，该skb发送出去即可，由发送者来释放，发送时调用
netlink_broadcast，在其中会进行释放，即由下层判断何时释放，释放时调用触发可写的
回调。
又比如udp要发送一个skb，该skb发送到ip层，由ip层负责，ip层又发送到链路层，由链路
层负责，链路层通过物理线路将其发送出去，返回发送成功，则将其释放，释放函数中通
过回调检查报告上层buffer有空，可以写入。

内核socket send API调用过程，检查何时可以发送（可写）

  +---------------------------------------+----------------------------------+
  |               任意时刻                |          需要缓冲区满足条件      |
  +-------------------+-------------------+-------------------+--------------+
  |       须入队列    |    无须入队列     |    须入队列       |  无须入队列  |
  +-------------------+-------------------+-------------------+--------------+
  |              alloc_skb()              |        sock_alloc_send_skb()     |
  +-------------------+-------------------+-------------------+--------------+
  |  skb_queue_tail() |                   |   skb_queue_tail()|              |
  +-------------------+-------------------+-------------------+--------------+
  |                           sock_def_write_space()                         |
  +-------------------+-------------------+-------------------+--------------+
  |                   |     NETLINK       |       TCP         |      UDP     |
  +-------------------+-------------------+-------------------+--------------+

alloc_skb()和sock_alloc_send_skb()的区别和说明：
    前者分配一个skb数据结构，而后者分配的同时将其与一个socket进行关联。
    关联通过skb_set_owner_w()和skb_set_owner_r()来关联读者和写者。
    通过skb_orphan()来将一个skb设置为无（读者或写者）主的buffer，无主的buffer
    可以调kfree_skb()来释放。
回调sock_def_write_space()会通过调用sock_writeable()来通知可写。
skb_queue_tail()入发送队列，目前有TCP用到队列来进行排序。

skb_set_owner_w()和skb_set_owner_r()关键处在于这两个函数会设置skb->destructor，
同时改变socket缓冲区的已占用buffer大小。
skb_orphan()则调用skb->destructor，然后将skb->destructor设置为NULL，使该skb成为
无主sk_buff。
sock_wfree()在其中会会回调sk_write_space()来通知可写。

为什么要通过下层了来释放？
因为只有下层才能精确知道何时发送成功，而一旦释放掉以后，socket又变成可写，如果
由上层负责释放可能造成，下层还没有发送完成，上层已经释放，报告可写，而实际下层
并不可写，这样会导致大量数据堵塞到下层，而如果采用下层释放，则可以在硬件通知发
送完成的情况下才释放空间，回调释放函数检查并报告可以继续发送。

---------------------------------------
References:
Linux Device Driver Chapter 11
