Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

指针和数组
主要涉及第四章、第九章和第十章

第四章
关键字：
左值，可更改的左值
数组名是一个左值，但是却是不可更改的左值。
注意地址（左值）和地址中的内容（右值）的区别。
左值表示在那里存储结果，在编译期就会确定，右值则在运行时才会确定。这样，每个符
号的地址是在编译时就确定了的。
所以，指针存储的是地址值，而这个地址值是个右值，是在运行时才确定的。

                               指针和数组的区别
 +-------------------------------------+-------------------------------------+
 |                指针                 |                 数组                |
 +-------------------------------------+-------------------------------------+
 | 保存的是地址数据                    | 保存的是数据                        |
 +-------------------------------------+-------------------------------------+
 | 数据是间接访问的，首先接收指针的内容| 数据是直接获取的，因此a[i]你可以直接|
 | 然后将其作为一个地址，从该地址处取得| 从a位置处便宜i取其内容即可          |
 | 数据，如果指针有下标[i]， 那么你需要|				     |
 | 从取得的地址处偏移i个位置来获取数据 |				     |
 +-------------------------------------+-------------------------------------+
 | 通常用于动态数据结构                | 通常用于保存固定数量的同类型元素    |
 +-------------------------------------+-------------------------------------+
 | 通常与malloc(), free()等共同使用    | 隐式的分配和释放                    |
 +-------------------------------------+-------------------------------------+
 | 典型的，指向匿名数据                | 命名的变量                          |
 +-------------------------------------+-------------------------------------+

定义指针不会给它所指向的位置分配空间，这里仅仅指定义指针。当给指针赋值一个常量
字符串是，会为该常量字符串分配空间。这个方式仅仅工作于常量字符串。此处通过指针
是不应该也不能更改该常量字符串的，通常它们被分配在代码段。

第九章
对于编译器来说，一个数组就是一个地址，而一个指针则是一个地址的地址。

作为函数参数的数组总是会被编译器转化为指针，其它情形下声明为数组就是指数组，声
明为指针就是指指针。但是使用数组（在一个语句或表达式中引用）则总可以使用一个指
针来重写。

C标准中规定的数组等同于指针的情形：
规则1：表达式中的数组名被编译器当作是指向数组第一个元素的指针
规则2：下标总是等价于相对于指针的偏移
规则3：在函数参数声明中的数组名被编译器当作是指向数组第一个元素的指针

在如下情况下，数组是作为整体来对待的，此时对数组的引用不可以用指向数组第一个元
素的指针代替：
·sizeof()	取大小
·&		取地址

规则1：由于，方括号为下标操作符，实际上表示的是一个加标记。所以实际上a[3]和3[a]
是等价的，当然，没有人会用3[a]的。
规则2，下标操作暗示这是一个数组访问，但并不保证如此。
规则三：C为什么要把数组参数作为指针来处理？答案是效率，所有非数组的数据参数是传
值的（即要生成参数的拷贝并且把拷贝传给函数，函数不能更改实参的值，仅仅能更该其
拷贝的值）。拷贝一个数组的时候可能开销很大，而大多数时候你并不需要一个数组的拷
贝。仅仅是为了指名你所感兴趣的数组。

多维数组

第十章
指针数组

---------------------------------------
References:

