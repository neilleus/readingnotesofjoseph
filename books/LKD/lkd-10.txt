Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

时间驱动和事件驱动，时间驱动也可以算作事件驱动。

*** 节拍率HZ（系统定时器频率）
asm/param.h中静态预处理定义，在系统启动时按照HZ值对硬件进行设置。
提高HZ的优缺点：
    Y1. 内核定时器可以以更高的频度和准确度运行
    Y2. 依赖定时值执行的系统调用，比如poll()和select()能够以更高精度运行
    Y3. 对诸如资源消耗和运行时间的测量有更精细的解析度
    Y4. 提高进程抢占的准确度
    Q1. 中断更频繁，中断开销加大，更频繁打乱cache

*** jiffies
用来记录系统自启动以来产生的节拍总数，由于每秒增加的jiffies数量等于HZ，则系统
运行时间就是jiffies/HZ。
jiffies的特点：
    volatile类型
    32位或64位无符号长整数
    在32位机上，现内核中使用64位无符号长整数来存放实际的jiffies，时间管理代码
    采用u64，而对外部的接口则是u32。
可以正确处理jiffies溢出回绕判断的四个内核宏 linux/jiffies.h
#define time_after(unknown, known)	((long)(known)) - (long)(unknown)<0)
#define time_before(unknown, known)	((long)(unknown)) - (long)(known)<0)
#define time_after_eq(unknown, known)	((long)(unknown)) - (long)(known)>=0)
#define time_before_eq(unknown, known)	((long)(known)) - (long)(unknown)>=0)
unknown参数为jiffies，known为需要对比的值。
内核定义了USER_HZ，用于代表用户空间可见的HZ。

*** RTC
持久存放系统时间，需要有电池供电。PC中RTC和CMOS集成在一起。
系统启动时，内核读取RTC来初始化墙上时间，该时间存放在xtime变量中。
x86中主要采用可编程中断时钟PIT来实现系统定时器

*** 时钟中断处理程序
包括体系结构相关部分和体系结构无关部分
体系结构相关的部分作为系统定时器的中断处理程序而注册到内核中，在产生时钟中断时
执行。大多需要执行如下工作：
    1.  获得xtime_lock锁，保护jiffies_64和墙上时间xtime
    2.  需要时应答或重设系统时钟
    3.  周期性使用墙上时间更新实时时钟
    4.  调用体系结构无关的时钟例程：do_timer
    5.  释放锁
do_time()执行如下工作：
    1.  给jiffies_64加1
    2.  更新资源消耗的统计值
    3.  执行已到期的动态定时器，下半部中执行
    4.  执行scheduler_tick()函数
    5.  更新墙上时间（xtime）
    6.  计算平均负载值

*** 墙上时间（当前实际时间）kernel/timer.c
存放于变量xtime中，类型为结构timespec，该结构定义于linux/time.h
读写该变量需要使用xtime_lock锁，该锁是一个seqlock锁。
用户空间取得墙上时间的接口：gettimeofday()，对应内核中一个系统调用。
内核更新xtime外，在文件系统中访问时间戳时也需要访问xtime。

*** 定时器（动态定时器，内核定时器）
这是管理内核时间的基础，超时后会自行销毁。
定时器由结构time_list表示，定义在linux/timer.h中，内核提供了相关接口，基本上不
必也不推荐直接访问该结构，所有接口在linux/timer.h中声明，在kernel/timer.h中实
现。
定时器使用过程：
    1.  首先要定义一个定时器对象：struct timer_list my_timer;
    2.  要进行初始化: init_timer(&my_timer);
    3.  填充需要的值，其中handler形式为：void t_handler(unsigned long data);
    4.  激活定时器: add_timer(&my_timer);
不可以用定时器来实现硬实时的任务，因为定时器并不很精准，可能延后。
mod_timer()可操作已初始化但还没有激活的定时器，返回时定时器被激活且设置新值。
del_timer()可提前停止定时器，注意SMP上潜在的竞争条件，del_timer_sync()可解决
SMP上的竞争条件，但不可以在中断中使用。
mod_timer()是SMP安全的，所以重设定时器时不要用del-手动重设-add，后者SMP不安全。

*** calibrate_delay()和bogomips(loops_per_jiffy)，init/main.c
计算处理器在给定时间内忙循环执行的次数，存放在loops_per_jiffy中。

*** 延迟执行
下半部
定时器
忙等：
    mdelay(ulong msecs);
    udelay(ulong usecs);
schedule_timeout()，睡眠指定延时时间后执行，不保证精确。
参数为需要延迟的jiffies数量，由于和调度程序有关，所以代码必须可以睡眠。


---------------------------------------
References:
Linux Kernel Development Chapter 10 定时器和时间管理

