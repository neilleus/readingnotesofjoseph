Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

虚拟存储器

虚拟存储器是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互。它为每
个进程提供一个大的、一致的、私有地址空间。

虚拟存储器提供了三个重要的能力：它把主存当作是磁盘的缓存，在主存中只保存活动区
域，并根据需求在主存和磁盘间换入换出；它为每个进程提供了一致的地址空间，从而简
化了存储器管理；它保护了每个进程的地址空间不会被其他进程所破坏。

以LOAD指令为例
物理寻址：CPU产生存储器的物理地址（PA），然后通过地址总线把它传递给主存（选择
存储器位置），主存取出该地址开始的要求大小的数据，从数据总线返回给CPU。
虚拟寻址：CPU产生一个虚拟地址（VA），通过MMU和操作系统把它翻译成物理地址，然后
主存返回所请求的数据。MMU利用存放在主存中的查询表来动态翻译虚拟地址，该表的内
容由操作系统管理。

虚拟存储器的组织
概念上，虚拟存储器被组织为一个存放在磁盘上的N个连续的字节大小的单元组成的数组。
每字节有一个虚拟地址，这个唯一的虚拟地址作为数组的索引。磁盘上数组的内容被缓存
到主存。磁盘上的数据分割成大小固定的块，称为虚拟页，这些页作为磁盘和主存之间的
传输单元，主存也被分割为物理页，虚拟页和物理页具有同样的大小，为2**p字节。

任意时刻，虚拟页面的集合分为三个不相交的子集：
    未分配的：没有数据关联的页，不占据磁盘空间
    缓存的：缓存在主存中的已分配页
    未缓存的：没有缓存到主存的已分配页
存储器层次结构：寄存器-SRAM缓存->DRAM缓存（主存）->磁盘
磁盘访问的时间开销要远远大于主存访问的开销，而且第一字节访问的开销更大。由于这
个原因，虚拟页趋向于很大，使用了精密的替换算法，且DRAM缓存是全相连的，即任何虚
拟页都可以放置在任何的物理页中，由于磁盘访问时间很长，采用了写回（write-back）
技术，而不是直写（write-through）技术。

页表
如何确定虚拟页是否命中，需要操作系统软件，MMU中的地址翻译硬件，和存放在主存中的
叫做页表的数据结构联合参与。操作系统负责维护页表的内容以及页交换。
页表的结构：页表就是一个PTE（page table entry）的数组。虚拟地址空间的每个页在
页表中的一个固定偏移处都有一个PTE表项。假设每个PTE有一个有效位和一个n位地址字段
有效位表示该页是否被缓存，如果有效位有效，n位地址字段表示主存中对应物理页的起
始地址，如果没有设置有效位，且地址是一个空地址，则表示这个虚拟页未分配，如果没
有设置有效位，但该地址不是空地址，则这个地址就是磁盘上虚拟页的起始位置。

页命中
当CPU读虚拟存储器的一个字时，地址翻译硬件将虚拟地址作为一个索引，定位它的PTE，
然后从存储器中读取PTE并判断，发现这个页是缓存状态，那么地址翻译硬件就可以直接
使用PTE中的物理存储器地址，构造出这个字的物理地址取得数据。

缺页
还是上述过程，DRAM缓存不命中就叫作缺页，缺页会导致缺页异常，会调用内核的缺页异
常处理程序，该程序就会选则一个牺牲页进行页替换，然后更新对应的PTE表项，返回，
返回时它会重新启动导致缺页的指令，这时页就会命中了。
现今的页面调度大多使用按需页面调度，页面调度（paging）也叫交换（swapping）。
按需页面调度就是只有在不命中发生时才会进行交换，也有其它的方法比如尝试预测不命
中，从而提前进行交换。

分配页面
当操作系统在分配一个新的存储器页时，调用malloc会在磁盘上创建空间，更新PTE表项，
并将它指向这个新创建的页面，从而达到分配空间的目的。

局部性
依赖局部性进行工作，几个术语：
工作集（working set）和常驻集合（resident set）都指活动页面（active page）集合
颠簸（thrashing），页面不停的换入换出，这会导致程序性能急剧下降。

虚拟存储器的作用
简化链接：独立地址空间，使进程的存储器映像保持高度的一致性，从而简化了链接器的
设计和实现。
简化共享：将不同进程的虚拟页指向同一个物理页，这洋酒可以很简单的实现共享。
简化存储器分配：由于DRAM存储器是全相连的，只要求虚拟存储器地址连续，而不必要求
物理存储器连续，所以可以将请求分配的主存映射到若干个物理页面。
简化加载：加载程序分配一个从地址0x08048000处开始的连续的虚拟页面，并将它们标识
为未缓存的，并将这些也表条目指向目标文件中适当的位置。加载器从不真正的从磁盘拷
贝任何数据到存储器中，二十当每个页面不命中时，由虚拟存储器系统自动换入。
映射一个连续虚拟页面集合到任意一个文件中的任意一个位置的概念叫做存储器映射。
Linux提供mmap系统调用来允许应用程序进行自己的存储器映射。

虚拟存储器作为内存保护的工具
可以在PTE中添加一些位来控制对一个虚拟页面内容的访问权限。如果一条指令违反了这个
限制，CPU就触发一个一般保护故障，将控制传递给一个内核中的异常处理程序，通常
Shell会报告为一个段错误（"Segmentation fault"）

地址翻译
CPU中的一个控制寄存器，页表基址寄存器（page table base register PTBR）指向当前
页表。n位的虚拟地址包含两个部分，一个p位的虚拟页面偏移（virtual page offset, 
VPO）和一个（n-p）位的虚拟页号（virtual page number，VPN）。MMU利用VPN来选择适
当的PTE，将页表中的物理页号（physical page number，PPN）和虚拟地址中的VPO串联起
来，就得到相应的物理地址。因为物理和虚拟页面都是P字节大小，所以物理页面偏移（
physical page offset, PPO）和VPO相同。
页命中时的地址翻译，页面命中完全由硬件来处理：
	处理器生成一个虚拟地址，并把它传给MMU
	MMU生成PTE地址，并从高速缓存/主存请求它
	高速缓存/主存向MMU返回PTE
	MMU构造物理地址，并把它传给高速缓存/主存
	高速缓存/主存返回所请求的数据字给处理器
缺页时的地址翻译，需要硬件和操作系统内核协作完成：
	处理器生成一个虚拟地址，并把它传给MMU
	MMU生成PTE地址，并从高速缓存/主存请求它
	高速缓存/主存向MMU返回PTE
	PTE中的有效位为零，MMU触发缺页异常，进入操作系统的缺页异常处理程序
	缺页异常处理程序算出物理存储器中的牺牲页，如果该页已经被修改，则把它页面换出到磁盘
	缺页异常处理程序调入新的页面，并更新存储器中的PTE
	缺页异常处理程序返回到原来的进程，驱使导致缺页的指令重新启动，重新开始。

结合高速缓存和虚拟存储器（这里有问题，高速缓存采用物理寻址是什么意思？）
同时使用虚拟存储器和高速缓存的系统中，使用虚拟地址还是物理地址来访问高速缓存？
大多数系统选择物理寻址。高速缓存使用物理寻址，多个进程同时在高速缓存中有存储块
和共享来自相同虚拟页面的块成为很简单的事情。而且高速缓存无需处理保护问题，因为
访问权限检查是地址翻译过程的一部分。
页表条目也是可以缓存的。高速缓存的物理地址访问也是通过MMU来访问的。

利用TLB加速地址翻译
TLB（translation lookaside buffer），CPU每产生一个虚拟地址，MMU就要做一次翻译，
就要查阅PTE一次，如果PTE在高速缓存中，速度可以接受，如果在主存中，开销就会很
大，所以引入了翻译后备缓冲器（TLB），位于MMU中，这是一个PTE的小缓存。
TLB结构（略）

多级页表
引入这个问题的原因是页表的存放需要占据大量的存储器空间，所以要压缩页表。
压缩页表的常用办法是采用层次结构的页表，分级后的页表，只有一级页表才需要在主存
中出现，二级页表在需要时创建，并页面调入和调出二级页表，这样就可以减小主存的压
力。只有最常使用的二级页表才会被缓存到主存中。访问K级PTE时，TLB将会起作用，通过
将页表中不同层次上的PTE缓存起来，以减小多级访问的开销。

Linux虚拟存储器系统
每个进程都有一个唯一的页表目录（一级页表）和页表集合。当一个Linux进程运行时，
尽管Pentium体系结构允许页表换入换出，但是实际上页表目录和已分配的页面相关的页
表是常驻存储器的。页面目录基址寄存器（page directory base register, PDBR）指向
页表目录的起始位置。
Linux为每个进程维持了一个单独的虚拟地址空间，其中内核以上的部分如下图：
           +--> +---------------------------------+ <--+
 每个进程  |    |与进程相关的数据结构（例如页表， |    |
 都不相同  |	|task，mm结构，内核栈等）         |    |
	   +-->	+---------------------------------+  内核虚拟存储器   
 对每个进  |	|           物理存储器            |    |
 程都一样  |	+---------------------------------+    |
	   |	|         内核代码和数据          |    |
0xC0000000 +-->	+---------------------------------+ <--+
内核虚存包含了内核的代码和数据，内核虚拟存储器的某些区域被映射到所有进程共享的
物理页面，比如每个进程共享内核的代码和全局数据结构。Linux也将一组连续的虚拟页面
（大小等于系统中DRAM的总量）映射到相应的一组连续的物理页面，这就为内核提供了一
种访问物理存储器中任何特定未知的便利方法。内核虚存的其他区域包含每个进程都不相
同的数据，比如页表，内核在进程的上下文中指向代码时使用的栈，一级记录虚存当前组
织的各种数据结构。
Linux将虚存组织成段的集合，一个段就是已分配的虚存的连续组块（chunks），这些虚存
的页面已某种方式相关联。比如代码段、数据段、共享段等。每个存在的虚拟页面都保存
在某个段中，而不属于任何段的虚拟页面是不存在的，并且不能被进程所引用。段的概念
很重要，它允许虚拟地址空间存在空隙，内核不必记录那些不存在的虚拟页，而这样的虚
拟页也不占用存储器、磁盘或者内核本身中的任何额外资源。
内核在系统中为每个进程维护一个单独的任务结构（task_struct），任务结构中的元素
包含或者指向内核运行该进程所需要的所有信息，比如PID，指向用户栈的指针，可执行
目标文件的名字，以及程序计数器等等。task_struct中有一个条目指向mm_struct，它描
述了虚拟存储器的当前状态。其中有两个字段pgd和mmap，pgd指向页面目录表的基址，而
mmap指向一个vm_area_structs（段结构）的链表，每个vm_area_structs都描述了当前虚
拟地址空间的一个段。当内核运行这个进程时，就将pgd放在PDBR控制寄存器中。
Linux缺页异常处理（略）。

---------------------------------------
References:
Chapter 10

