Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

链接

链接的时机：链接可以执行于编译时；也可以执行于加载时；甚至执行于运行时；
中间文件：cpp处理后变为.i文件，ccl处理后变成.s文件，as处理后变成.o文件，ld处理
后变成可执行文件。

链接器，加载器
可重定位目标文件由各种不同的代码和数据节（section）组成。指令在一个节中，初始化
的全局变量在另一个节中，未初始化的变量又在另一个节中。
链接器需要完成两个任务来创建可执行文件：符号解析；重定位。

各系统的可执行文件格式：现代UNIX，Linux，各种BSD，Solaris使用的是Unix ELF
（Executable and Linkable Format）格式，Windows使用的是System V Unix早期版本的
COFF（Common Object File Format）格式的一个变种，叫做PE（Portable Executable）

可执行目标文件：包含二进制代码和数据，可以直接拷贝到存储器执行
共享目标文件：一种特殊类型的可重定位目标文件。可以在加载活运行时动态加载并链接。
编译器和汇编器生成可重定位目标文件，链接器生成可执行文件。

可重定位目标文件：包含二进制代码和数据
一个典型ELF可重定位目标文件的结构：
 0 +--------------+
   |  ELF header  |
   +--------------+ <---------+
   |    .text     |           | 已编译程序的机器代码
   +--------------+           | 
   |   .rodata    |           | 只读数据，比如printf的格式串或者是switch跳转表
   +--------------+           |
   |    .data     |           | 已经初始化的全局C变量
   +--------------+           |
   |    .bss      |           | 未初始化的全局C变量，目标文件中不占存储空间
   +--------------+           | 一个符号表，存放程序中被定义和引用的函数和
   |   .symtab    |       sections 全局变量的信息。每个可重定位目标文件中它都存
   +--------------+           | 在，与编译器中的符号表不同，它不包含局部变量
   |   .rel.text  |           | 在链接合并时需要重定位的.text节中的位置列表
   +--------------+           |
   |   .rel.data  |           | 被模块定义或引用的任何全局变量的信息
   +--------------+           |
   |    .debug    |           | 调试符号表，需要-g选项来生成
   +--------------+           |
   |    .line     |           | C源程序行号和.text节指令的映射，需要-g选项生成
   +--------------+           |
   |   .strtab    |           | 字符串表，为.symtab和.debug节的符号表以及节头部
   +--------------+ <---------+ 表中的节名字生成。是C风格字符串序列。
   |   节头部表   | <---------- 描述目标文件的节信息
   +--------------+
ELF头部以一个16字节的序列开始，这个序列描述了字的大小和endian。ELF头剩下的部分
包含帮助链接器解析和解释目标文件的信息。包括ELF头的大小，目标文件的类型（可重
定位，可执行，还是共享），机器类型。节头部表文件偏移。以及节头部表中的表项大小
和数量。不同节的位置和大小是由节头部表描述的，其中目标文件中每个节都由一个固定
大小的表项。
为什么要区分已初始化和未初始化的全局C变量？
主要是处于空间效率的考虑，未初始化的全局变量不在目标文件中占据空间，可以节省磁
盘空间。
.rel.text 在与其他文件链接时.text节中需要重定位的位置列表，一般调用了外部函数或
者引用了全局变量的指令都需要重定位。而仅仅调用本地函数的则不需要重定位。在可执
行文件中默认是不包含重定位信息的，除非使用者显式指定。
.rel.data 被模块引用或定义的任意全局变量的信息。一般来说，那些初始值是一个全局
变量地址的已初始化全局变量都需要修改。
.debug 调试符号表，包含了程序中的本地变量和typedef定义，定义或引用了的全局变量
以及C源程序。仅在使用-g选项时生成

符号和符号表
符号表的内容，包括三种符号：当前模块定义的全局符号（变量和函数），当前模块引用
的全局符号（变量和函数），当前模块定义和引用的本地或静态符号（带static的本地函
数或全局变量）。
注意本地链接器符号和本地程序变量是不同的，.symtab节中的符号表不包含对应于本地非
静态变量的任何符号。带有static属性的本地过程变量是不在栈中管理的，而是在.data和
.bss中为每个定义分配空间，并在每个符号表中创建一个有惟一名字的本地链接器符号。
符号表是由汇编器使用编译器输出到汇编语言.s文件中的符号构造的。.symtab节包含ELF
文件的符号表。符号表项的结构如下：
	typedef struct {
		int name;	字符串表中的字节偏移量
		int value;	符号节偏移（可重定义文件中）或符号的虚拟内存地址
		int size;	以字节为单位的对象大小
		char type:4,	数据、函数、节还是源文件名
		     binding:4;	本地还是全局
		char reserved;	保留
		char section;	节索引，或三个伪节（见后面说明）
	} Elf_symbol;
三个伪节，它们在节头表中是没有表项的，其中ABS代表不该被重定位的符号；UNDEF表示
为定义的符号（比如在本模块中引用，但是在其他地方定义的符号）；COMMON表示还未被
分配位置的未初始化的数据目标，对于它，value域给出对齐请求，size给出最小大小，
在链接时可以作为一个.bss目标分配。

符号解析
寻找符号引用和符号定义之间的联系
本地定义和引用的符号只需要保证定义一次，以及确保静态变量即可。
对于不在当前模块定义的全局符号会被假定在其他模块中定义，生成一个链接器符号表项
交给链接器来处理。
链接器如何解析多处定义的全局符号？
编译时编译器输出每个全局符号给编译器，全局符号有强弱之分，汇编器把这些信息隐含
的编码到可重定位目标文件的符号变种。强符号指的是函数和已经初始化的全局变量，未
初始化的全局变量是弱符号。根据强弱符号有如下规则：
不允许有多个强符号；如果有一个强符号多个弱符号，那么选择强符号；如果有多个弱符
号，从中任选一个。

与静态库链接  库的概念
链接的时候仅拷贝静态库中程序引用的模块
为什么要引入库的概念？
（考虑假如不使用库的话有哪些可工作的方法，它们有什么困难。）
在Unix系统中，静态库以一种称作archive的特殊文件存放在磁盘中，存档文件是一组连接
起来的可重定位目标文件的集合。有一个头部描述每个成员目标文件的大小和位置。存档
文件以后缀.a标识。
链接器如何使用静态库来解析引用？
从左到右逐步解析命令行上的文件，维护三个集合一个可重定位目标文件集合E，一个无
法解析的符号表集合U和一个在前面的输入文件中已经定义的符号集合D。
在解析过程中动态修改E，U，D的内容，直至解析完毕，如果U为空则可以链接，否则出现
无法解析的外部符号错误。要注意由链接顺序引起的问题。
关于库的一般准则是如果它们相互独立（即没有互相引用的问题），则把它们放在命令行
的尾部，如果它们不是相互独立的，则需要对它们进行排序。保证定义这个符号的库在至
少一个引用符号之后出现（因为符号表中未定义的符号引用会在从左到右处理命令行指定
的可重定位目标文件时确定定义，如果在引用出现前就定义则会导致无法找到定义）。如
果需要满足以来需求，可以在命令行上重复库。（经GCC测试只有库有顺序问题，如果是
直接的可重定位目标文件（.o文件），则哪个在前哪个在后不要紧）

重定位
将代码中的符号引用和符号表中的符号定义（符号表项）联系起来。这里链接器就知道了
各个输入模块的代码节和数据节的大小，将合并各个输入模块，并未每个符号分配运行时
地址。重定位包括两步：重定位节（合并节）和符号定义；重定位节中的符号引用（依赖
可重定位目标模块中的可重定位表项这一数据结构）。
代码的重定位表项存放在.rel.text中，已初始化的数据的重定位表项放在.rel.data中。
重定位表项是由汇编器生成的，当汇编器遇到最终位置未知的目标引用，它就会生成一个
重定位表项，告诉链接器在将目标文件合并成可执行文件时如何修改这个引用。
	typedef struct {
		int offset;	需要重定位的引用的节偏移
		int symbol:24,	标识需要重定位引用应该指向的符号
		    type:8;	重定位类型，告知链接器如何修改新的引用
	} Elf32_rel;
ELF定义了11种不同的重定位类型，这里介绍两种最基本的：
R_386_PC32：重定位一个使用32位PC相对寻址的地址引用。使用的是PC当前运行值
R_386_32：重定位一个使用32位绝对地址的引用。
objdump -r a.o 打印出重定位表项的内容
objdump -D a.o 反汇编a.o，两个结合可以看出重定位的内容

可执行目标文件
典型的ELF可执行目标文件
       0                +--------------+ <--+
                        |    ELF头部   |    |
 将连续的文件节映 +---> +--------------+    |
 射到运行时的存储 |     |    段头表    |    |
 器段             +---> +--------------+    |
			|    .init     |  只读存储器段（代码段）
                        +--------------+    |
			|    .text     |    |
                        +--------------+    |
			|    .rodata   |    |
                        +--------------+ <--+
			|    .data     |    |
                        +--------------+  读写存储器段（数据段）  
			|    .bss      |    |
                        +--------------+ <--+
			|    .symtab   |    |
                        +--------------+    |
			|    .debug    |    |
                        +--------------+    |
			|    .line     |  不加载到存储器的符号表和调试信息
                        +--------------+    |
			|    .strtab   |    |
                   +--> +--------------+    |
  描述目标文件节   |    |   节头部表   |    |
                   +--> +--------------+ <--+

可执行目标文件类似可重定位目标文件，它还包括了程序的入口点（entry point），即
当程序运行时要执行的第一条指令的地址。.init节定义了一个小函数叫做_init，程序的
初始化代码会调用它。可执行目标文件没有.rel节。	
段头表，ELF可执行文件被设计为很容易加载到存储器，连续的可执行文件组块（chunks）
（这是什么）被映射到连续的存储器段（这又是什么）。段头表描述了这种映射关系。

加载可执行目标文件
在命令行上输入unix#./a.out之后发生了什么？
shell首先会解析，确定这不是一个shell内置的命令，认为它是一个可执行目标文件。通
过调用驻留在内存的称为加载器的操作系统代码来运行。Unix程序可以通过execve函数来
调用加载器。加载器将可执行目标文件中的代码和数据从磁盘拷贝到存储器中，然后跳转
到程序的第一条指令，即入口点（entry point），来运行该程序。这个将程序拷贝到存储
器并运行的过程叫做加载。
加载器运行时根据段头表的描述，将可执行文件的对应内容拷贝到代码段和数据段，然后
加载器跳转到入口点，也就是符号_start的位置。在_start地址处的启动代码是在目标文
件ctrl.o中定义的，对所有的C程序都一样。
每个Unix程序都由一个运行时存储器映像，对于Linux，代码段总是从0x08048000处开始。
数据段是在接下来的下一个4KB对齐的地址处。运行时堆在接下来的下一个读/写段之活的
第一个4KB对齐的地址处，并通过malloc网上增长。开始于0x40000000处的段是为共享库
保留的，用户栈总是从地址0xbfffffff开始向下增长的。从0xc0000000处开始网上是为操
作系统驻留存储器的部分（内核）的代码和数据保留的。
            +--------------------------------+  /|\
            |        内核虚存空间            |   |  对用户代码不可见的存储空间  
 0xc0000000 +--------------------------------+   |
            |      用户栈（运行时创建）      |
            +--------------------------------+  <-- %esp 栈指针
            |                                |
            +--------------------------------+
            |          共享库映射区          |
 0x40000000 +--------------------------------+
            |                                |
            +--------------------------------+  <-- brk
            | 运行时堆（由malloc运行时创建） |
            +--------------------------------+  <--+
            |       读写段 （.data .bss）    |     |
            +--------------------------------+   从可执行文件中加载
            | 只读段 （.init .text .rodata） |     |
 0x08048000 +--------------------------------+  <--+
            |          未使用空间            |
          0 +--------------------------------+
               Linux运行时的存储器映像

关于加载器，且看wiki的描述
In Unix, the loader is the handler for the system call execve().
The Unix loader's tasks include:
   1. validation (permissions, memory requirements etc.);
   2. copying the program image from the disk into main memory;
   3. copying the command-line arguments on the stack;
   4. initializing registers (e.g., the stack pointer);
   5. jumping to the program entry point (_start).
Dynamic linking loaders are another type of loader that load and link shared
libraries (like .dll files) to already loaded running programs.

加载概述
unix系统中的每一个程序都运行在一个进程上下文中，这个进程上下文有自己的虚拟地址
空间。当shell运行一个程序时，父shell进程生成一个子进程，它是父进程的一个复制品
子进程通过execve系统调用启动加载器。加载器删除子进程已有的虚拟存储器段，并创建
一组新的代码、数据、堆和栈段。新的栈和堆段被初始化为零。通过将虚拟地址空间的页
映射到可执行文件的页大小的组块（chunks），新的代码和数据段被初始化为可执行文件
的内容。最后，加载器跳转到_start地址，它最终会调用应用的main函数。除了一些头部
信息，在加载过程中没有任何从磁盘到内存的数据拷贝。直到CPU引用一个被映射的虚拟
页，才会进行拷贝。此时操作系统利用它的页面调度机制，自动将页面从磁盘传送到存储
器。

动态链接共享库
共享库是一个目标模块，在运行时可以加载到任意的存储器地址，并在存储器中和一个程
序链接起来。这个过程称为动态链接，是由一个叫做动态链接器的程序来执行的。
共享库(shared library)也叫共享目标(shared object)，通常以.so后缀来表示。
共享有两层含义，在任何给定的文件系统中，一个库只有一个.so文件，所有引用该库的可
执行目标文件共享这个.so的代码和数据（可以不准确的称为磁盘共享）；在内存中，一个
共享库的.text节只有一个副本，可以被不同的正在运行的程序共享（可以不准确的称之为
内存共享）。
在链接共享库的可执行目标文件中，没有任何的共享库的代码和数据被真的拷贝到可执行
文件中，而是链接器拷贝了一些重定位和符号表信息，它们使得运行时可以解析对共享库
中代码和数据的引用。
.interp节，这个节包含了动态链接器的路径名，动态链接器本身就是个共享目标，Linux
上市ld-linux.so。加载器加载和运行可执行文件时，看到.interp节，将不再将控制传递
给应用，而是先加载和运行这个动态链接器。
然后动态链接器执行如下重定位完成链接任务：重定位共享库的文本和数据段到某个存储
器段，IA32/Linux系统中，位于0x40000000开始的区域中；重定位可执行目标文件中所有
对共享库定义的符号引用。最后动态链接起将控制传递给应用，这是起，共享库的位置就
固定了，并且在程序执行过程中都不会改变了。

从应用程序中加载和链接共享库（运行时加载）
通过动态链接的接口函数，可以在运行时加载和链接共享库
#include <dlfcn.h>
void *dlopen(const char *filename, int flag);
若成功返回指向句柄的指针，出错返回NULL。
dlopen函数加载和链接共享库filename，flag (RTLD_GLOBAL RTLD_NOW, RTLD_LAZY等)
该函数如何使用查找相应手册。
void *dlsym(void *handle, char *symbol);
dlsym函数的输入是一个指向前面已经打开的共享库的句柄和一个符号的名字，如果该符号
存在，返回该符号的地址，否则返回NULL。
int dlclose(void *handle);
成功返回0，出错返回非零。
const char *dlerror(void);
返回前面调用失败时的错误消息字符串，未失败则返回NULL。

从共享库引入的问题：位置无关码（PIC）（这里还不清晰，PIC实现是个难点）
多个进程如何共享一个程序的一个拷贝呢？
1. 可以事先为这样的共享库固定分配专用的地址空间，这个弊病很明显。
2. 使用位置无关码。编译库代码，使得不需要链接器修改库代码，就可以在任何地址加载
和执行这些代码。这类代码就叫做位置无关码。gcc使用-fPIC指示。
IA32系统中，对于同一个目标模块内的函数的调用不需要特殊处理，因为对它们的引用是
PC相关的（相对寻址），已经是PIC了，但是对于外部函数和变量的引用就通常不是PIC，
因为它们要求在链接时重定位。
PIC如何实现，PIC数据引用如何实现，PIC函数调用如何实现？
这里分成两块来讲述，一部分是说明PIC数据引用是如何实现的，一部分说明PIC函数调用
是如何实现的。关于数据引用，编译器利用了一个性质，即数据段总是紧随在代码段之后。
代码段中任何指令和数据段中任何变量之间的距离都是一个运行时常量，与代码段和数据
段的绝对存储器位置无关。可以利用这一性质，编译器在数据段开始的地方创建了一个表，
叫做全局偏移量表GOT。GOT包含每个被目标模块引用的全局数据的表项，编译器还为GOT
中的每个表项生成一个重定位记录，在加载时动态链接器会重定位GOT中的每个表项，使
它包含正确的绝对地址。PIC代码有性能缺陷，访问每个全局变量需要多余的指令和存储
器访问。PIC函数调用也可以使用这种方法，但处于性能考虑，ELF采用叫做延迟绑定的技
术（lazy binding），就是函数地址的绑定会推迟到第一次调用该函数时，第一次函数调
用的开销很大，但是其后的每次调用只要一条指令和一次间接存储器访问。

工具箱
ar
strings
strip
nm
size
readelf
objdump
ldd

总结
二进制目标文件有三种形式：可重定位的，可执行的，共享的
链接器的两个主要任务是符号解析和重定位。符号解析将目标文件中的每个全局符号绑定
到一个唯一的定义。重定位确定每个符号最终的存储器地址，并修改对那些目标的引用

---------------------------------------
References:
Chapter 7

