数字常量、字符串和标量变量($)
1.  整数和浮点数内部都以双精度浮点数来表示，长整数可用下划线分割
2.  0开头为八进制整数，0x开头为十六进制，0b开头为二进制，前置0只对数字有效，对
    字符转换过来的数字无效。
3.  数字运算符：+、-、*、/、%、**，复数运算使用Math::Complex模块
4.  Perl的字符串可以包含任意字符，即可以利用字符串操作二进制数据。不用NUL来终止
    分为单引号字符串和双引号字符串两类。
5.  单引号字符串中两个特殊字符为：单引号和反斜杠本身（用来表示字符串在下一行继
    续），要表示单引号本身和反斜杠本身，需要用反斜杠来转义，其它字符则不用。
    双引号字符串中反斜杠可以表示控制字符（如\n等）、八进制(\0??)、十六进制的表示
    (\x??)，双引号字符串还有变量内插的性质。
    双引号字符串的表示方法：单引号、双引号和反引号；qq(), qq//, qq!!等表示有插
    值，q(), q//, q!!等表示不插值，qx()等表示执行系统命令。
6.  字符串操作符：.和x，其中x后的n会在运算前转换为小于等于n的整数。
7.  undef值，关键字undef表示undef值，数字时当0使用，字符串当0长字符串使用。
    boolean值，false包括（数字0，空串，undef，字符串0，其他类型转换位数字或
    字符串以后适用此规则）

列表和数组变量(@)
8.  引用数组元素的方法：$array_name[suffix] 下标从零开始可使用负值，
    -1表示最后一个元素；$#array_name 表示最后一个元素的下标。
9.  数组操作符（函数）：push、pop、shift、unshift、splice
10. 字符串的列表：qw()，qw括号（可以是其他符号）内的字符串不需要引号。

11. 上下文：标量上下文和列表上下文
12. 运算符：双目、单目、逻辑、位、数值比较、字符串比较、条件、范围、赋值
    引用、解引用、括号，逗号等等
    几个独特的运算符：
	and or not xor	低优先级的逻辑操作符
	<=>和cmp	根据左比右小于、等于、大于返回-1、0、+1
	.. x **		范围（从*到？），字符串重复，乘方
	\和->		引用和解引用
	=~和!~		绑定（匹配和不匹配）
	=>		哈希表中键值对
	文件测试符

13. 哈希(%)
    表示方法：依次写入/采用=>运算符表示，用小括号括住。
    引用哈希表元素，$hash_name{key_name};
    如果hash key只有字母、数字、下划线组成且不是字母开头的，则可以省略引号

正则表达式
14. m//、s///和tr///以及?...，仅作用于标量，从左往右匹配，默认只匹配一次，tr在
    编译时运行，?比较丰富，?= ?! ?<= ?: ?#
15. 符号
	.	#匹配任何除换行符之外的字符
	.*	#匹配任意字符
	*	#匹配前一项0次或多次
	?	#匹配前一项0次或1次
	+	#匹配前一项至少1次
	^	#表示字符串的头或求否集
	$	#表示字符串的尾
	\b	#\bword\b表示锚定word
	^\s*$	#表示空行
	()	#表示模式分组
	|	#表示 或
	[]	#表示匹配括号内出现的任意单个字符
	\d	#[0-9]
	\w	#[A-Za-z0-9_]
	\s	#[\f\t\n\r]
	\D	#[^\d]
	\W	#[^\w]
	\S	#[^\s]
	a{5,15}	#匹配任意的连续5到15个a
	\U\u\L\l#用在替换之前表示全大写/第一个大写/全小写/第一个小写

16. 修饰符：i/g/o/e/x/m/s  忽略大小写/全局匹配/优化速度/替换部分作为代码执行/
	允许空白，可添加注释/??/使.匹配任何字符
17. 插值的处理
18. 反向引用，$1, $2, $3..$65536; 对应正则表达式中的每个圆括号。
    $`, $&, $'表示匹配部分前的部分，正好匹配部分，匹配部分后的部分
19. 返回值，s///返回1或空串，全局下返回匹配次数或空串，m//返回1或空串
20. qr用来表示正则表达式，可以用它将一个正则表达式赋值给一个标量。

21. HERE文档：<<HERE ... HERE<ENTER>用来表示多行文本。通过前面包围HERE的引号
    类型来确定是否插值，此处HERE也可以是其他单词。

逻辑控制
22. if(){;}else{;}
    if(){;}elsif{;}elsif{;}else{;}
    while(){;}
    do{;}while();
    until(){;}
    do{;}until();
    for(;;){;}
    foreach $var (@list){;}	#$var在循环结束仍保持它原来的值
    last/next/redo/goto;	#终止/下一个/重做当前/跳转到标签

23. POD文档， 代码和文档的杂合怪胎

子函数
24. 定义形式：sub func_name{;}，返回类型返回类型由上下文决定。
25. 声明：sub func_name;  OR use subs qw(func1, func2, ...);	#声明后可省略()
26. 函数原型:
		sub func1($) {...}	#only one parameter
		sub func2($$;$) {...}	#头两个为必须参数，后一个为可选参数
		sub func3(&@) {...}	#不带\的@和%必须放在最后面，通吃后面
					#&代表函数
		sub func4(*$) {...}	#*代表文件句柄
		sub func5(\@@) {...}	#\@是一个数组引用，\%是一个哈希引用
27. 匿名函数和左值函数，函数名可以赋值给一个标量
28. 作用域：my、local和our，local为动态作用域，可自动传递给所调用的子函数。

文件操作：
29. 常用句柄：DATA（__END__之后的内容）; STDIN、STDOUT、STDERR
30. 文件操作：读，钻石操作符或者read()函数
	      写，print()函数
	      打开，open()函数，读、写、追加、管道读(process |)、
		管道写(|process)、截断读写(+>)、不截断读写(+<)
	      定位，seek()和tell()函数
	      关闭，close()函数
	      系统，调用系统读写函数、sysopen(), sysread(), syswrite()
31. 文件测试
	存在性测试（file/dir/symbolic_link）	if (-e "data.txt") {...}
	类别测试 （目录-d，普通文件-f，符号链接-l，管道-l，套接字-S，
		块特殊文件-b，字符特殊文件-c，终端-t）
	属性 （可读-r/-R，可写-w/-W，可执行-x/-X，拥有-o/-O 有效/实际uidgid）
	零长测试-z，非零长-s（返回长度）
	文本文件-T，二进制文件-B
	时间属性测试，-M/A/C
32. 聚集GLOB和typeglob

引用
33. 操作符，引用：\；解引用：->, $, @, %, &。ref()函数返回引用类型。
34. 引用与[]
35. perlref, perreftut...

名字空间、包和模块
36. 特殊变量都是全局的，没有限定是词典式的与名字空间无关
37. use在compile的时候引入模块，require在运行时引入模块

38. use的用法：常数（use constant name=>value;）
		强制类型运算（use integer;）
		修改lib路径 （use lib LIST;）
		...
39. perl和c的互操作：Perl-XS, perlxstut, perlxs, perlguts

调试
40. perl -d进入调试状态

图形用户界面
41. Tk：use Tk; 
	基本结构，创建主窗口
		构造窗体，添加组件
		启动事件循环
		主程序结束
		定义子程序
		1;
42. 向组件传递参数的方法：
	创建时传递：$T = $main->Label(-text=>'#!^', -o2=>V2, -o3=>V3...)
	取回参数：$V2 = $T->cget('-o2');
	修改参数：$T->configure(-option=>new_value);
	组件常用参数：文本相对组件的位置（anchor）背景色、前景色、位图、宽高
		边框样式、响应状态、文本、变量文本
43. 常用对象：主窗体 my $main = new MainWindow; 方法$main->MainLoop;
	Label/RadioButton/CheckButton/Entry/Text/Listbox/Scrolled/Scale/Frame
	Menubutton/Scrollbar/Dialog/FileSelect/Table/Canvas/ProgressBar/
44. 图形管理方法：place、pack、grid

46. 与系统交互
	system
	fork
	``
	exec
	同步运行，在外部运行的同时让perl不挂起
	收发信号，通过kill函数发送信号。
	信号处理函数（signal handler），给%SIG对应的信号元素分配信号处理函数
	Perl的信号处理尚不完善，尽量少用

47. 模块
	使用use声明使用模块，如果仅用其中的某些函数，可以在use后面的列表里指出
	use File::Basename qw/basename/;	#使用该模块的basename函数
	use File::Basename qw//; use File::Basename();	#都是不引入任何函数
	use File::Basename::dirname $name;	#在不引入函数时使用函数，前提是
						已经use了该模块。
48. eval可以用来捕捉错误，将代码块置入其中，发生严重错误时，不会程序崩溃，并将
    错误原因放在$@中，eval是一个表达式，需要在其后的花括号后加分号表示结束。它
    也是一个块，可以有自己的my变量以及返回值，无错同子函数，有错返回undef或空
    列表。
    四种不能由eval捕捉的问题：（1）让perl崩溃的问题，例如内存耗尽；（2）语法错
    误，这个在编译时发现；（3）使用exit时，这回立即终止一个程序，可以用die来避
    免这种不可捕获得情况；（4）warnings不可捕捉。
    当心eval引入的安全问题。

Tk Designer

CGI

面向对象
...
