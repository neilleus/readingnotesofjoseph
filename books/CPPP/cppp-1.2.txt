Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

*** 基本概念：
* 标准C++头文件没有后缀，即include时不需要指明.h
* 基本数据类型：比C增加了bool类型，有true和false两个取值
* 标准库扩展基本数据类型：string，complex，vector，list等
* CPP编译器预定义宏：__cplusplus，C编译器与定义宏：__STDC__
* 在CPP程序源代码中包含C语言代码可以用如下方法
    #ifdef __cplusplus
    extern "C" {
    #endif
    ...
    C代码
    ...
    #ifdef __cplusplus
    }
    #endif
* C++可以引用C库头文件，可以通过C库头文件的C名字或者C库头文件的C++名字进行引
用，这时C库头文件为{c[header_name]}，比如stdio.h为cstdio。在这里使用头文件的C
名字还是C++名字会影响到预处理器，因为在C++中有名字空间的概念，如果使用头文件的
C++名字，那么这些头文件定义的名字会在std名字空间内。默认在我们的程序文本中是不
可见的。而使用C库头文件的C名字，则直接可用其中定义的名字，但这回导致名字空间污
染的问题。

*** 输入输出
* stdin，stdout和stderr与预定义的iostream对象的cin，cout和cerr绑定在一起。
<<, >>操作符在iostream上执行的是一个操作，而不只是简单的提供数据，比如endl在输
出流中插入一个换行符然后刷新输出缓冲区。
连续的输入输出操作符可以连接在一起使用。
* iostream库也支持文件输入输出，这时还需要额外包含<fstream>头文件。为了打开一个
文件以便输出，我们必须声明一个ofstream类型的对象，类似的为了打开一个文件以便输
入，我们必须声明一个ifstream类型的对象。
* 数组反映了数据与对其进行操作的算法的分离，这正是过程化程序设计的特征。

*** 对象分配
* 静态分配：编译器自动处理分配和释放，有名字，我们可以直接对其进行操作。
* 动态分配：程序员编程处理分配和释放，通过new和delete操作符分配和释放，只能通过
指针访问。

*** 面向对象程序设计的基础概念
* 成员访问操作符：.用于类对象访问成员，->用于类对象指针访问对象成员。
* 构造函数：用于对象初始化，构造函数与类同名，可以定义多个参数表不同的构造函数，
构造函数不可指定返回值。
* C++不允许成员函数与数据成员共享同一个名字，一般习惯是在数据成员名字前加一个
下划线。
* 内联函数：为了解决性能问题而引入，为了避免函数调用导致的开销。但内联函数编译
器并不保证内联，它会做出自己的判断。
* 重载函数运行时与非重载函数相同，是在编译时确定调用的实例的。
* 缺省构造函数，无需用户提供任何参数的构造函数，explicit关键字。
* 类域操作符::，可以在类定义中仅声明方法，在类定义外面用类域操作符实现方法。
* 对象声明的多种方法：
    IntArray array;
    IntArray ia1 = array;	//调用拷贝构造函数
    IntArray ia2(array);	//调用拷贝构造函数，用array的内容进行初始化
* 引用，它没有指针用法（即->），它同指针一样提供了对对象的间接访问。
* 多个构造函数的代码类似或雷同时，可以将重复的部分提取出来，形成独立函数，以便
共享。
* 类定义和相关的常数值或typedef名通常定义与头文件中，并且头文件以类名命名。
* 继承，为了设计一个基类首先考虑成员的访问权限，然后要考虑那些类型相关的成员函
数需要声明为虚拟函数。非虚拟的调用在编译时生成，而虚拟调用则在运行时确定。
TODO：P31


---------------------------------------
References:
C++ Primer 3rd Edition Chapter 1: Getting Started
C++ Primer 3rd Edition Chapter 2: A Tour of C++

