Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

软件开发过程：
    需求分析							=> 需求规格书
    架构设计							=> 设计文档
    构建（详细设计，数据结构，编码调试，集成，开发者测试）	=> 源代码
    系统测试
构建也叫编程，是四个阶段中无论如何不可能缺少的阶段，最为重要。

比喻（Metaphor）
    算法是精确描述，是可预测的确定的，而比喻像探照灯，告诉你如何来找出答案。是
    一种启发式的方法，一种试探的方法。
    对于编程来说，最大的挑战还是将问题概念化（conceptualizing）。
    几种开发方式的比喻：
    	写作式，完全原创，从零开始自我创造
	耕种式，每次完成一个小部分，一个小部分完成并经测试稳定后将其添加进系统
	养殖式，增量的，演进式的开发，从一个简单的demo到最终的产品。
	构建式，软件构建（architecture）
		支撑性测试代码（scaffolding）
		构建（construction）
		基础类（foundation classes）
		分离代码（tearing code apart）

软件构建过程有昂贵的人力成本，仔细准备，精心计划，但不是事无巨细的过度计划，要
为时间留出余地，可以综合使用如上多种比喻。

构建
    在一开始就把事情做好，质量把关从计划开始，准备工作的中心目标是降低风险。常
    见的风险包括糟糕的需求分析和项目计划。根据项目特点来选择特定的降低风险的方
    法。原因：1）人员不专业；2）急切开始编码，无论是开发人员还是管理者；
    作为技术雇员有必要培训周围的非技术人员（包括老板），讲解开发过程。
    在实现一个系统前你需要理解这个系统应该做什么，该如何做到这些。
    架构师吃掉需求，设计师吃掉架构，程序员消化设计。
    目标：我们已经非常详细的研究了需求和设计，我想不出在编码和调试期间会有什么
    大问题。

软件项目种类（在准备活动和构建活动中寻求平衡）
    1）商业系统；2）性命攸关的系统；3）性命攸关的嵌入式系统
    越往右需要更详细的前期准备工作，需要单独的架构设计，需要独立的测试过程和正
    式的部署过程。
    
问题定义
    问题定义只定义问题是什么，而不涉及任何可能的解决方案。问题定义只是一个简单
    的陈述。

需求变更的处理
    需求变更很多时候不可避免，需要对齐进行处理。当需求变更发生时：
    1）评估需求，如果无法继续进行构建，那么要停下来先把它做好，然后再继续前进
    2）建立需求变更控制程序，在特定时间评审需求的变更。
    3）采用能适应变更的开发方法，比如演进原型（evolutionary prototype）
    4）放弃项目，需求无法实现，那么取消项目。

架构设计，概要设计
    1）系统架构首先以概括的形式对系统做综述，描述其它解决方案以及之所以选用最
    终架构而不选用其它方案的理由。
    2）架构应该定义程序的主要构造块（building blocks），明确定义各个构造块的责
    任，明确定义每个构造块的通信规则。
    3）架构要详细定义主要的类，指出主要类的责任以及该类如何与其它类交互，记录
    曾考虑的其它设计方案及理由。
    4）架构要描述用到的主要文件和数据表的设计，记录曾考虑的方案。
    5）用户界面设计
    6）架构应该描述一份管理稀缺资源的计划，比如嵌入式中的内存管理。
    7）描述实现设计层面和代码层面的安全性方法。
    8）如果关注性能，那么应该在需求中定义性能目标。架构应该提供估计的数据并解释
    9）可伸缩性，架构应该描述系统如何应对各种（比如用户，数据）数量的增长。
    a）互操作性，如果与其它系统进行交互，架构应描述如何完成这一任务。
    b）国际化/本地化
    c）输入输出，架构应该详细定义读取策略并描述在哪一层检测IO错误
    d）错误处理，在架构层面定义它。
    e）容错性，架构应该详细定义所期望的容错种类。
    ...

时间分配
    一般来说需求分析和架构等前期计划要投入10%~20%的工作量和20%~30%的时间。这里
    不包括详细设计（属于构建）的时间，这些时间里要注意要留有预留的时间。

编程语言选择和编码约定
    约定命名规则，注释，代码书写的格式。
    工具箱
    
--------------------------------------
References:
Chapter 1 to Chapter 4
