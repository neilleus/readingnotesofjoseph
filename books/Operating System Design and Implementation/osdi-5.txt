Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

文件系统

为什么要有文件的概念？
因为主存：容量有限制，不能长期保存，信息共享困难

文件命名，文件结构，文件类型，文件访问，文件属性，文件操作
文件名长度，文件扩展名，文件名的组成字符和大小写区分
常用的三种文件结构：（1）无结构字节流；（2）固定长度记录；（3）关键字索引
的不固定长度记录树
操作系统不关心文件的结构，对于操作系统来说，文件就是字节流。
文件类型：常规文件、目录文件，设备文件等
文件访问：顺序访问（如串口）和随机访问（如磁盘）
文件属性：权限，时间，长度等
文件操作：创建，删除，打开，关闭，读写等

目录和文件夹，目录项，目录结构，路径名，目录操作
许多系统中，目录也是文件，目录包含目录项。
目录项的两种形式：（1）包含名字和数据结构信息（2）包含名字和指向数据结构的指针
目录结构：（1）单一目录；（2）二级目录；（3）树状层次目录系统
路径名：绝对路径和相对路径，特殊目录项.和..；
目录操作：创建、删除、打开，关闭，读取，重命名，增加目录项，删除目录项

磁盘和文件系统基础
磁盘扇区0称为主引导记录（Master Boot Record MBR）。
MBR的末尾有一个分区表，里面记录了每一个分区的起始地址和结束地址。
在这些分区中有一个是活动分区，即启动时要引导的分区。启动时MBR程序确定活动分
区，读入其第一个磁盘扇区（引导扇区），然后执行它。
每个分区都以一个引导扇区开头，即使该分区没有可引导的系统，最好也预留引导扇区。
在PC机上，主要分区个数最多不操作4个，因为主引导记录和第一个512字节的扇区末尾之
间仅能容纳4个数组元素（每个16字节）来存放分区描述符。有些操作系统可以将分区表
中的某一项（某个主分区）作为一个扩展分区，指向一个逻辑分区链表，这样可以实现任
意多个分区。不过，BIOS只能从主分区来启动一个操作系统，即最初的启动必须是从主分
区开始。由它来装入代码，管理各个逻辑分区。
不是所有磁盘都需要分区，BIOS读入磁盘的第一个扇区，然后查找一个魔数，标志它是有
效的可执行代码，主引导记录和引导扇区使用相同的魔数。
无论哪种操作系统或硬件平台，上述关于磁盘MBR和引导扇区的描述都适用。
与引导扇区的启动不同，不同文件系统的磁盘分区布局（引导扇区后的扇区分配）各不同。
一个UNIX文件系统的可能结构：
    +------+------+------------+--------+------+----------+
    |引导块|超级块|空闲空间管理|索引节点|根目录|文件和目录|
    +------+------+------------+--------+------+----------+
磁盘分区的类型（主分区，扩展分区，文件系统类型）由分区表中的一字节代码来判断。
分区上的磁盘空间管理，访问全乡以及目录查找等是由分区上所安装的文件系统实现的。
一个硬盘上只能有一个主分区作为扩展分区，扩展分区理论上可以分出任意多个子分区。
为什么要分区？
可以方便的区分操作系统的系统文件和用户文件
可以实现虚拟存储器的交换分区
可以将日志和缓存等独立出来
可以实现多步启动，允许引导多种操作系统
可以方便的保护和隔离文件

文件实现：如何分配磁盘扇区给文件
连续分配：简单高效；碎片问题；大小指定问题，文件难更改；只读文件系统可方便应用
链表分配：每块第一个字节用作指针指向下一个块；无碎片；随机访问速度慢；破坏了磁
盘扇区大小正好是2的整数幂这一特点，导致效能降低。
带文件分配表的链表结构：将上面方案中的链表指针抽取出来单独存放到一张表（FAT表）
中，将该表放在内存中。无碎片问题；随机访问只需遍历内存中的表格；整个磁盘扇区用
于数据存储；内存中要保存一张表，内存空间耗费。Windows的FAT文件系统采用这种方案
索引节点：为每个文件赋予一个数据结构称为索引节点（i节点），里面列出了文件的属
性和各个数据块的磁盘地址。只在文件打开时才将数据结构装入内存，与FAT相比内存耗
费小；i节点存放的磁盘块数量有限，大文件有问题，引入二级、三级间接块解决该问题。

目录实现
如何定位根目录？
UNIX通过超级块，通过第一个i节点（指向根目录）得到根目录位置。
Windows XP根据引导扇区中的信息找到主文件表（MFT），然后用它定位文件系统其他部分
定位根目录后可对目录树搜索，定位文件。
文件属性存放位置：目录项；i节点；
共享文件：目录项指向同一i节点；符号链接（文件内容为另一文件的路径名）；
Win98的目录：杂合体
UNIX的目录：目录项包含i节点号和文件名，文件属性存放在i节点中。
NTFS的目录：通过增加属性来解决问题；MFT主文件表；保护系统；加密和压缩等功能。

磁盘空间管理
可选方案：1）段式（将磁盘分成大小不同的块分配给不同文件）2）页式（将文件划按磁
盘块划分为大小相同的块）
显而易见的，一般采用后一种方式来存储，怎么决定块的大小，按照扇区、磁道、柱面哪
种为基本单位来划分（也可能是几个扇区、磁道、柱面为单位）？太大会造成空间浪费，
性能和空间利用率的要求相是冲突的，太小会造成磁头移动频繁速度太慢，要取个折中。
这里扇区大小是个物理的概念，块的大小则是文件系统的概念，块的大小一般都取扇区大
小的整数倍，通常是512B，1KB或者4KB。
空闲块管理（怎么来表示系统中的空闲块）
可选方案：1）链表法，用链表来保存空闲块数组，每个空闲块用32位来表示，一个1K的
块可以保存255个空闲块，另外32位用来保存链表指针，这种方法在大量空闲块时占用较
多的磁盘空间，当磁盘趋向满时，保存空闲块占用的磁盘空间越来越小，所以可以很好的
适用。2）位图法，用一位的状态来表示一个块是空闲还是已经使用，占用的空间固定，
不随空闲块多少的变化而变化。也是一种不错的方法。
磁盘出厂时会在每个磁道保留一些备用扇区，当出现坏扇区时则由控制器进行重新映射
磁盘备份
考虑因素：
方案：1）完整备份，冻结系统时间长；2）增量转储，恢复麻烦；3）压缩，要求所有备份
块完整，可靠性低；4）快照，对文件系统数据结构某个时刻的状态做标记，仅在这个时候
需要冻结系统，备份过程可以延后。需要将备份之间的修改和变化缓存。
策略：1）物理转储，整个磁盘备份，包括坏块和空闲块。2）逻辑转储，按照文件系统结
构进行备份，保留指定目录树，需要首先备份目录树结构。

文件系统的一致性保证（系统崩溃后的问题）fsck和chdsk工具
原理：利用系统内部的冗余信息来修复不一致性，一致性的检验是分区独立的。
一致性检查分两种：数据块和文件。
数据块检查：分别对空闲块记录中的数据块和i节点中由文件使用的磁盘块进行扫描列出
表格，然后比对，可能出现如下问题：
1）丢失块，两处都没有，把它标记为空闲块来恢复；2）在空闲块列表中出现了两次，将
其标记为空闲块；3）在文件中出现了多次，则分配同数量的空闲块将其插入到所影响的文
件中并报告错误。
文件系统检查：对文件系统进行扫描，每个文件对应一个计数器，从根目录开始递归扫描，
对目录中的文件的硬链接数进行计数。完成后得到一个i节点索引的表格，描述了每个文件
被包含在多少个目录中。然后把这些数量与i节点中保存的数量进行比对。可能的结果是i
节点中的链接数大于或者小于扫描得到的链接数，无论何种情况，都可以把i节点中的数量
设置为合适的值，以保证不会丢失文件。

文件系统性能
高速缓存：保存于内存中的一组磁盘块，要分类对待不同类型的磁盘块，对于设计文件系
统结构的关键磁盘块，比如i节点块，应该立即得到保存，以减少系统突然崩溃时的不一
致性发生的几率。另外系统会定期调用sync来将缓存刷新到磁盘中。
直写高速缓存（write-through cache）：将更改立即写回磁盘，windows的策略。
块预读：猜测性的对正在访问的磁盘块附近的块预先读入。
减少磁头臂的移动：1）连续分配磁盘块；2）合理安排i节点的位置。

日志结构文件系统
为了改进系统的访问速度充分利用磁盘性能而设计。
把整个磁盘看作一个日志，所有操作放在内存的缓冲区，并定期收集到一个单独的段中，
然后作为一个完整的连续段被写入到磁盘日志的末尾。每个段内的数据可能是混合的，段
的开头有一个摘要，描述了段的主要内容。由于i节点分散在日志中，所以需要维护一个i
节点映射表，它以i节点为下标，第i相指向磁盘上的第i个i节点。这个映射表存放在磁盘
上，但是会被缓存以便快速访问。此处可以看出，如果一个文件被修改后，它的内容会被
写入到日志尾而不是原来的位置，这样会导致原来的地方出现空，所以引入了一个cleaner
循环不断的去扫描和压缩磁盘日志。它依次读入日志的摘要，找出其中的i节点和文件，然
后去查找当前的i节点映射表，看这些i节点和文件块是否还在使用，如果没有则丢弃，并
标记对应的块为空闲。这样磁盘就变成了一个循环日志：写线程不断往后面添加，清理线
程从前面删除旧块。

文件安全
安全相关知识（略）风险分类、攻击来源、安全设计原则、用户认证

保护机制
访问监视器，访问被保护资源时需要通过访问监视器去检查访问的合法性，访问监视器则
会去查找它的策略表来确定访问是否合法。

保护的对象：可以是硬件资源也可能是软件，对象由唯一的名字和一组可以被进程执行的
操作构成。保护机制需要禁止进程访问未授权的对象，并能够授权一个合法操作子集。
保护域：标识了包含的对象和相应的操作权限。任意时刻，每个进程总是运行于某个保护
域中，如UNIX由UID和GID定义进程的域。（个人注：这里的域也可以理解为上下文）

访问控制表（ACL）和权能表，它们的不同在于如何表示对象和域的对应关系。

MINIX3文件系统的实现
本质上MINIX3文件系统是一个运行在用户空间的大的C程序，在读、写文件时，用户进程
向文件系统发送一条请求消息，文件系统完成相应的操作后返回一个结果。它也可以看作
是一个和调用进程处于同一机器的网络文件服务器。
文件系统的基本结构与进城管理器和所有的IO设备驱动一样，它有一个主循环在不断的等
待消息的到来。当消息到达后，首先判断类型，以其为索引去查表得到处理函数。然后进
行处理，返回一个状态值，由文件系统再把应答消息发送给调用进程。然后回到主循环。
布局：魔术标记的引导块（1KB），之后是描述文件系统布局的超级块（1KB，用于给出文
件系统各个部分的大小，比如i节点数、磁盘块数量等），之后是i节点位图，之后是空闲
区段位图，之后是i节点，之后是数据。
详细实现（略）i节点数据结构，块高速缓存RAM盘的实现，目录和路径名的管理，文件描
述符，文件锁，管道和设备文件，重要的数据结构和表格，主程序，操作。

