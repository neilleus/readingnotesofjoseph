Author: Joseph Lee
E-Mail: fdlixiaojun@gmail.com

### 关于CPU的操作模式和对计算机资源的保护
操作系统为应用程序提供对计算机硬件的一致视图，通过CPU提供的不同操作模式，操作
系统可以实现程序的独立操作和保护资源不受非法访问。CPU在不同操作模式下只可以执
行相应范围的指令集，这样可以实现对硬件等资源的保护。

### 当前进程
current宏，包含头文件<linux/sched.h>
当前实现是将task_struct结构的指针隐藏在内核栈中，这种结构不依赖于特定架构的具体
实现，快速，而且可以方便的支持SMP系统。（不理解）

### 内核栈很小（1~2页），谨慎使用，需要大的自动变量应该动态分配和释放。
函数、变量需要导出才能被内核别的部分（模块）使用，到处方法为：
EXPORT_SYMBOL(name);
模块编程时常用的内核头文件包括：init.h, module.h, moduleparam.h等

### 模块名为modulename.ko，由源文件file1.c和file2.c生成，Makfile写法如下：
	obj-m	:= modulename.o
	modulename-objs	:= file1.o file2.o

### insmod和modprobe工作机理
它依赖于kernel/module.c中的一个系统调用sys_init_module，通过它给模块分配内存
（函数vmalloc负责内存分配）以便加载模块，然后，它将模块正文复制到分配好的内存
区域，并通过内核符号表解析模块中的内核引用，最后调用模块的初始化函数。
tips: 有且只有系统调用的名字前面有sys_前缀。
modprobe与insmod类似，但是它会检查装载的模块是否引用了一些当前内核不存在的符号，
如果有，则会在当前模块搜索路径中查找定义了这些符号的其他模块，找到的话加载。而
这种情况下使用insmod会失败并记录日志。
/proc/modules文件和/sys/module目录

### module_init(func_init)和module_exit(func_exit)
这里的func_init和func_exit原形如下
static int __init func_init(void);	/* 返回错误状态 */
static void __init func_init(void);
初始化失败时要注意释放初始化过程中已经占有的资源。释放前要检查这些资源的状态。

### 模块参数
insmod和modprobe命令行指定，modprobe还可以从模块的配置文件/etc/modprob.conf中
读取参数值。
模块参数用module_param宏声明，该宏定义与<linux/moduleparam.h>文件中。该宏包含
三个参数：变量名称、类型和用于sysfs入口项的许可掩码。该宏通常放于文件头部。
内核支持的模块参数类型包括：bool，invbool（与bool相反，true为假，false为真），
charp，有符号和无符号的short, int, long整数。
module_param_array(name, type, num, perm);	/* perm in <linux/stat.h> */
用于声明数组参数。
所有参数都应该有默认值，自定义类型的参数可以用模块代码中的hook设置。

### 内核版本信息以及vermagic.o，该文件包含了许多内核信息，可用来检查模块兼容性
<linux/version.h>头文件
一般而言，依赖于特定版本或平台的代码应该位于低层宏或者函数之后。


### 用户空间驱动，可链接C库，可杀死，内存可换出，可调试；无法使用中断，无法直接
#访问内存（需要经过mmap映射），无法直接访问IO端口（需要使用ioperm或iopl），响
#应慢。
例子：libusb，Xserver（指不是基于framebuffer的那种）
通常用户空间驱动被实现为一个服务器，其任务是替代内核作为硬件控制的唯一代理。客
户程序通过该服务器和设备进行通信。

块设备：随机无序访问固定大小的块，通常安装文件系统
字符设备：字符流方式有序访问
根本区别：能否随机访问，随意跳转到位置，按块方式还是字符流方式
字符设备

### 关于设备号
主设备标识设备对应驱动程序和次设备号用于确定设备文件所指设备
dev_t用来保存设备号
MAJOR(dev_t)和MINOR(dev_t)用于取得主次设备号，MKDEV(int major, int minor)用于
生成dev_t。
向内和请求分配设备号：
已知主设备号时：
int register_chrdev_region(dev_t first, unsingned int count, char *name);
无法确定所用设备号时：
int alloc_chrdev_region(dev_t *dev, unsigned int firstminor,
			unsigned int count, char *name);
释放设备编号：
void unregister_chrdev_region(dev_t first, unsigned int count);
通常会在模块清除函数中调用它。

### 数据结构：
struct file_operations{};		/* <linux/fs.h> */
struct file{};				/* <linux/fs.h> */
struct inode{};				/* */

### 设备注册到系统
初始化结构：
void cdev_init(struct cdev *cdev, struct file_operations *fops);
注册到系统：
int cdev_add(struct cdev *cdev, dev_t num, unsigned int count);
int register_chrdev(unsigned int major, const_char *name,
		    struct file_operations *fops);	/* deprecated */
从系统中移除：
void cdev_del(struct cdev *dev);
int unregister_chrdev(unsigned int major, const char *name); /* deprecated */
注意：cdev_add可能失败，必须在设备所有操作都就绪可以被调用以后才应该调用它。
而在设备从系统中移除以后就不应该再访问该设备了。


---------------------------------------
参考文件:
Linux Device Driver 3rd edition Chapter 2
Linux Device Driver 3rd edition Chapter 3
